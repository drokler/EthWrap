//<auto-generated> Abi auto generated contract. 2023-03-01T04:43:02</auto-generated>
using System.Numerics;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.BlockchainProcessing.Processor;
using Nethereum.Contracts;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;

namespace biswapAuction
{
    public class SolidityAuction
    {
        private SolidityAuctionLoader _loader;
        private SolidityAuctionConfiguration _configuration;
        public SolidityAuction()
        {
            _loader = new SolidityAuctionLoader();
            _configuration = new SolidityAuctionConfiguration();
        }

        public string _canReceive { get; set; }

        public string Auctions { get; set; }

        public string NftBlacklist { get; set; }

        public string NftForAccrualRB { get; set; }

        public string DealTokensWhitelist { get; set; }

        public string AuctionNftIndex { get; set; }

        public string UserFee { get; set; }

        public string Royalty { get; set; }

        public string TreasuryAddress { get; set; }

        public string DefaultFee { get; set; }

        public string ExtendEndTimestamp { get; set; }

        public string MinAuctionDuration { get; set; }

        public string ProlongationTime { get; set; }

        public string RateBase { get; set; }

        public string BidderIncentiveRate { get; set; }

        public string BidIncrRate { get; set; }

        public string FeeRewardRB { get; set; }

        public string FeeRewardRBIsEnabled { get; set; }

        public SolidityAuctionConfigurationBuilder Configure()
        {
            return new SolidityAuctionConfigurationBuilder(_configuration);
        }
    }

    internal class SolidityAuctionLoader
    {
    }

    public class SolidityAuctionConfiguration
    {
        public bool _canReceive_load { get; set; }

        public bool _canReceive_forceload { get; set; }

        public bool Auctions_load { get; set; }

        public bool Auctions_forceload { get; set; }

        public bool NftBlacklist_load { get; set; }

        public bool NftBlacklist_forceload { get; set; }

        public bool NftForAccrualRB_load { get; set; }

        public bool NftForAccrualRB_forceload { get; set; }

        public bool DealTokensWhitelist_load { get; set; }

        public bool DealTokensWhitelist_forceload { get; set; }

        public bool AuctionNftIndex_load { get; set; }

        public bool AuctionNftIndex_forceload { get; set; }

        public bool UserFee_load { get; set; }

        public bool UserFee_forceload { get; set; }

        public bool Royalty_load { get; set; }

        public bool Royalty_forceload { get; set; }

        public bool TreasuryAddress_load { get; set; }

        public bool TreasuryAddress_forceload { get; set; }

        public bool DefaultFee_load { get; set; }

        public bool DefaultFee_forceload { get; set; }

        public bool ExtendEndTimestamp_load { get; set; }

        public bool ExtendEndTimestamp_forceload { get; set; }

        public bool MinAuctionDuration_load { get; set; }

        public bool MinAuctionDuration_forceload { get; set; }

        public bool ProlongationTime_load { get; set; }

        public bool ProlongationTime_forceload { get; set; }

        public bool RateBase_load { get; set; }

        public bool RateBase_forceload { get; set; }

        public bool BidderIncentiveRate_load { get; set; }

        public bool BidderIncentiveRate_forceload { get; set; }

        public bool BidIncrRate_load { get; set; }

        public bool BidIncrRate_forceload { get; set; }

        public bool FeeRewardRB_load { get; set; }

        public bool FeeRewardRB_forceload { get; set; }

        public bool FeeRewardRBIsEnabled_load { get; set; }

        public bool FeeRewardRBIsEnabled_forceload { get; set; }
    }

    public class SolidityAuctionConfigurationBuilder
    {
        public SolidityAuctionConfiguration Configuration { get; }

        public SolidityAuctionConfigurationBuilder(SolidityAuctionConfiguration configuration)
        {
            Configuration = configuration;
        }
    }

    public static class SolidityAuctionConfigurationExt
    {
        public static SolidityAuctionConfigurationBuilder Load_canReceive(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration._canReceive_load = true;
            configurationBuilder.Configuration._canReceive_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadAuctions(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.Auctions_load = true;
            configurationBuilder.Configuration.Auctions_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadNftBlacklist(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.NftBlacklist_load = true;
            configurationBuilder.Configuration.NftBlacklist_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadNftForAccrualRB(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.NftForAccrualRB_load = true;
            configurationBuilder.Configuration.NftForAccrualRB_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadDealTokensWhitelist(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.DealTokensWhitelist_load = true;
            configurationBuilder.Configuration.DealTokensWhitelist_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadAuctionNftIndex(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.AuctionNftIndex_load = true;
            configurationBuilder.Configuration.AuctionNftIndex_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadUserFee(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.UserFee_load = true;
            configurationBuilder.Configuration.UserFee_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadRoyalty(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.Royalty_load = true;
            configurationBuilder.Configuration.Royalty_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadTreasuryAddress(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.TreasuryAddress_load = true;
            configurationBuilder.Configuration.TreasuryAddress_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadDefaultFee(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.DefaultFee_load = true;
            configurationBuilder.Configuration.DefaultFee_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadExtendEndTimestamp(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.ExtendEndTimestamp_load = true;
            configurationBuilder.Configuration.ExtendEndTimestamp_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadMinAuctionDuration(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.MinAuctionDuration_load = true;
            configurationBuilder.Configuration.MinAuctionDuration_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadProlongationTime(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.ProlongationTime_load = true;
            configurationBuilder.Configuration.ProlongationTime_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadRateBase(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.RateBase_load = true;
            configurationBuilder.Configuration.RateBase_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadBidderIncentiveRate(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.BidderIncentiveRate_load = true;
            configurationBuilder.Configuration.BidderIncentiveRate_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadBidIncrRate(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.BidIncrRate_load = true;
            configurationBuilder.Configuration.BidIncrRate_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadFeeRewardRB(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.FeeRewardRB_load = true;
            configurationBuilder.Configuration.FeeRewardRB_forceload = force;
            return configurationBuilder;
        }

        public static SolidityAuctionConfigurationBuilder LoadFeeRewardRBIsEnabled(this SolidityAuctionConfigurationBuilder configurationBuilder, bool force = false)
        {
            configurationBuilder.Configuration.FeeRewardRBIsEnabled_load = true;
            configurationBuilder.Configuration.FeeRewardRBIsEnabled_forceload = force;
            return configurationBuilder;
        }
    }
}