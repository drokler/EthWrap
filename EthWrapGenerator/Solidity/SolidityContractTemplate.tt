<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
using System.Numerics;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.BlockchainProcessing.Processor;
using Nethereum.Contracts;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;

namespace <#= Context.Namespace #>
{

    public class Solidity<#= Context.Contract.Name #> {
        
        private Solidity<#= Context.Contract.Name #>Loader _loader;
        private Solidity<#= Context.Contract.Name #>Configuration _configuration;

        public Solidity<#= Context.Contract.Name #>(){
            _loader = new Solidity<#= Context.Contract.Name #>Loader();
            _configuration = new Solidity<#= Context.Contract.Name #>Configuration();
        }

        <#foreach (var property in Context.Contract.ContractProperties) {#>
             public <#= property.EvaluatedType #> <#= property.Name #> {get;set;}
        <#}#>

        public Solidity<#= Context.Contract.Name #>ConfigurationBuilder Configure() {
            return new Solidity<#= Context.Contract.Name #>ConfigurationBuilder(_configuration);
        }
    }

    internal class Solidity<#= Context.Contract.Name #>Loader {

    }

    public class Solidity<#= Context.Contract.Name #>Configuration {
  
        <#foreach (var property in Context.Contract.ContractProperties) {#>
             public bool <#= property.Name #>_load {get;set;}
             public bool <#= property.Name #>_forceload {get;set;}
        <#}#>
    }

    public class Solidity<#= Context.Contract.Name #>ConfigurationBuilder {
 
        public Solidity<#= Context.Contract.Name #>Configuration Configuration { get; }

        public Solidity<#= Context.Contract.Name #>ConfigurationBuilder(Solidity<#= Context.Contract.Name #>Configuration configuration){
            Configuration = configuration;
        }
    }

    public static class Solidity<#= Context.Contract.Name #>ConfigurationExt {
        
        <#foreach (var property in Context.Contract.ContractProperties) {#>
             public static Solidity<#= Context.Contract.Name #>ConfigurationBuilder  Load<#= property.Name #>
                            (this Solidity<#= Context.Contract.Name #>ConfigurationBuilder configurationBuilder, bool force = false){
                configurationBuilder.Configuration.<#= property.Name #>_load = true;
                configurationBuilder.Configuration.<#= property.Name #>_forceload = force;
                return configurationBuilder;
             }
        <#}#>

    }
    
  
}
<#+

    public SolidityContractContext Context { get; set; }
    
    
    
#>