<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
using System.Numerics;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.BlockchainProcessing.Processor;
using Nethereum.Contracts;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;

namespace <#= Context.ContractModel.Namespace #>
{
    public class Abi<#= Context.ContractModel.ContractName #> {

        private readonly Web3 _web3;
        private readonly string _address;

        public Abi<#= Context.ContractModel.ContractName #>(Web3 web3, string address){
            _web3 = web3;
            _address = address;
            EvaluateEventHandler();
        }
        #region structures

        <#foreach (var abiStruct in Context.Structs) {#>
            public class <#= abiStruct.Name #> {
                <#foreach (var property in abiStruct.Parameters) {#>

                    [Parameter("<#= property.Type #>", null, <#= property.Order #>, <#= property.Indexed.ToString().ToLower() #>)]
                    public <#= property.SystemType #> <#= property.Name #> {get; set;}
                <#}#>
            }
        <#}#>

        #endregion

        #region events 
        private void EvaluateEventHandler(){
            <#foreach (var eventModel in Context.Events) {#>

                _<#= eventModel.SystemName #>EventHandler = _web3.Eth.GetEvent<<#= eventModel.SystemName #>Event>(_address);
                       
            <#}#>
        }

        public void ParseEvents(FilterLog[] logs, List<IEventLog> events) {
             <#foreach (var eventModel in Context.Events) {#>
                events.AddRange(_<#= eventModel.SystemName #>EventHandler.DecodeAllEventsForEvent(logs));      
            <#}#>
        }
      
        <#foreach (var eventModel in Context.Events) {#>
            private Event<<#= eventModel.SystemName #>Event> _<#= eventModel.SystemName #>EventHandler;

            [Event("<#= eventModel.Name #>")]
            public class <#= eventModel.SystemName #>Event : IEventDTO
            {
                <#foreach (var property in eventModel.Parameters) {#>

                    [Parameter("<#= property.Type #>", null, <#= property.Order #>, <#= property.Indexed.ToString().ToLower() #>)]
                    public <#= property.SystemType #> <#= property.Name #> {get; set;}
                <#}#>
            }
         <#}#>


         #endregion

        #region call functions

        <#foreach (var callFunc in Context.CallFunctions) {#>
            
            [Function("<#= callFunc.Name #>")]
            public class <#= callFunc.SystemName #>Request : FunctionMessage
            {
               <#foreach (var property in callFunc.RequestModel) {#>

                    [Parameter("<#= property.Type #>", null, <#= property.Order #>, <#= property.Indexed.ToString().ToLower() #>)]
                    public <#= property.SystemType #> <#= property.Name #> {get; set;}
                <#}#>
            }
            

            [FunctionOutput]
            public class <#= callFunc.SystemName #>Response : IFunctionOutputDTO
            {
                <#foreach (var property in callFunc.ResponseModel) {#>

                    [Parameter("<#= property.Type #>", null, <#= property.Order #>, <#= property.Indexed.ToString().ToLower() #>)]
                    public <#= property.SystemType #> <#= property.Name #> {get; set;}
                <#}#>
            }
            
            public async Task<<#= callFunc.SystemName #>Response> <#= callFunc.SystemName #>(<#= callFunc.SystemName #>Request request) {

                var handler = _web3.Eth.GetContractQueryHandler<<#= callFunc.SystemName #>Request>();
                var result = await handler.QueryDeserializingToObjectAsync<<#= callFunc.SystemName #>Response>(request, _address);
                return result;
            }


        <#}#>

        #endregion

        #region send functions

             private static Dictionary<string, FunctionBuilderBase> _builders = new Dictionary<string, FunctionBuilderBase>()
            {
               <#foreach (var callFunc in Context.SendFunctions) {#>
                    { "<#= callFunc.ShaSignature #>", new FunctionBuilder<<#= callFunc.SystemName #>Request>(null)},
               <#}#>
            };


            private static Dictionary<string, Func<string, FunctionMessage>> _buildAction = new()
            {
                  <#foreach (var callFunc in Context.SendFunctions) {#>
                    { "<#= callFunc.ShaSignature #>", (str) =>
                        {
                            var builder = (FunctionBuilder<<#= callFunc.SystemName #>Request>)_builders["<#= callFunc.ShaSignature #>"];
                            return builder.DecodeFunctionInput(new <#= callFunc.SystemName #>Request(), str);
                        }
                    },
                  <#}#>
            };

                public async Task<List<FunctionMessage>> GetAllFunctions(ulong blockBefore, CancellationToken cancellationToken = default)
                {
                    
                    var toBlock = (ulong) (await _web3.Eth.Blocks.GetBlockNumber.SendRequestAsync()).Value;
                    var fromBlock = toBlock - blockBefore;
                    
                   return await GetAllFunctions(fromBlock, toBlock, cancellationToken);
               }

             public async Task<List<FunctionMessage>> GetAllFunctions(ulong fromBlock, ulong toBlock, CancellationToken cancellationToken = default)
                {
                    var ret = new List<FunctionMessage>();
                                        
                    var processor = _web3.Processing.Blocks.CreateBlockProcessor(steps =>
                    {
                        steps.TransactionStep.SetMatchCriteria(t => t.Transaction.IsTo(_address));
                        steps.TransactionStep.AddSynchronousProcessorHandler(t =>
                        {
                            var txHex = t.Transaction.Input.Substring(2, 8);
                            ret.Add(_buildAction[txHex](t.Transaction.Input));
                        });

                    });
                    await processor.ExecuteAsync(new BigInteger(toBlock), cancellationToken, new BigInteger(fromBlock));

                    return ret;
               }

            <#foreach (var callFunc in Context.SendFunctions) {#>
            
            [Function("<#= callFunc.Name #>")]
            public class <#= callFunc.SystemName #>Request : FunctionMessage
            {
               <#foreach (var property in callFunc.RequestModel) {#>

                    [Parameter("<#= property.Type #>", null, <#= property.Order #>, <#= property.Indexed.ToString().ToLower() #>)]
                    public <#= property.SystemType #> <#= property.Name #> {get; set;}
                <#}#>
            }
                        
            public async Task<TransactionReceipt> <#= callFunc.SystemName #>(<#= callFunc.SystemName #>Request request) {

                var handler = _web3.Eth.GetContractTransactionHandler<<#= callFunc.SystemName #>Request>();
                var receipt = await handler.SendRequestAndWaitForReceiptAsync(_address, request);
                return receipt;
            }


        <#}#>
        #endregion

    }
}
<#+

    public AbiContractContext Context { get; set; }
    
    
    
#>