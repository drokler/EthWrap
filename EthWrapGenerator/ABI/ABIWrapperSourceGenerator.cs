using System;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Nethereum.ABI.ABIDeserialisation;


namespace EthWrapGenerator.ABI
{
    [Generator]
    public class ABIWrapperSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {

            var abiFiles = context.AdditionalFiles
                .Where(t => string.Compare(Path.GetExtension(t.Path), ".abi",
                    StringComparison.InvariantCultureIgnoreCase) == 0).ToList();

            var contractFolders = abiFiles.GroupBy(t => Path.GetFileName(Path.GetDirectoryName(t.Path)))
                .ToDictionary(t => t.Key, t => t.ToList());

            foreach (var contractFolder in contractFolders)
            {
                var folderName = contractFolder.Key;

                foreach (var contractText in contractFolder.Value)
                {
                    var fileName = Path.GetFileNameWithoutExtension(contractText.Path);

                    var content = contractText.GetText(context.CancellationToken);
                    try
                    {
                        var abiSource = content.ToString();
                        var abiContract = ABIDeserialiserFactory.DeserialiseContractABI(abiSource);
                        var abiCtx = new AbiContractContext(folderName, fileName, abiContract);

                        var template = new AbiContractTemplate()
                        {
                            Context = abiCtx
                        };

                        var source = Format(template.TransformText());
                        //File.WriteAllText("d:/testabires", source);
                        context.AddSource($"{folderName}{fileName}.g.cs", source);

                    }
                    catch (Exception e)
                    {
                        File.WriteAllText("d:/testabierr", e.Message + e.InnerException?.Message);
                        throw e;
                    }
                }

            }

        }


        public void Initialize(GeneratorInitializationContext context)
        {
        }

        private static string Format(string source)
        {
            var tree = CSharpSyntaxTree.ParseText(source);
            var root = tree.GetRoot().NormalizeWhitespace();
            var ag = $"//<auto-generated> Abi auto generated contract. {DateTime.UtcNow:s}</auto-generated>";
            return ag + Environment.NewLine +  root.ToFullString();
        }
    }
}
