//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/TrembovetskiNA/source/repos/EthWrap/EthWrapGenerator\Solidity.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SolidityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, NatSpecSingleLine=91, NatSpecMultiLine=92, 
		Int=93, Uint=94, Byte=95, Fixed=96, Ufixed=97, VersionLiteral=98, BooleanLiteral=99, 
		DecimalNumber=100, HexNumber=101, NumberUnit=102, HexLiteral=103, ReservedKeyword=104, 
		AnonymousKeyword=105, BreakKeyword=106, ConstantKeyword=107, ContinueKeyword=108, 
		ExternalKeyword=109, IndexedKeyword=110, InternalKeyword=111, PayableKeyword=112, 
		PrivateKeyword=113, PublicKeyword=114, PureKeyword=115, TypeKeyword=116, 
		ViewKeyword=117, AbstractKeyword=118, Identifier=119, StringLiteral=120, 
		WS=121, COMMENT=122, LINE_COMMENT=123;
	public const int
		RULE_sourceUnit = 0, RULE_pragmaDirective = 1, RULE_pragmaName = 2, RULE_pragmaValue = 3, 
		RULE_version = 4, RULE_versionOperator = 5, RULE_versionConstraint = 6, 
		RULE_importDeclaration = 7, RULE_importDirective = 8, RULE_natSpec = 9, 
		RULE_contractType = 10, RULE_contractDefinition = 11, RULE_inheritanceSpecifier = 12, 
		RULE_contractPart = 13, RULE_stateVariableDeclaration = 14, RULE_usingForDeclaration = 15, 
		RULE_structDefinition = 16, RULE_constructorDefinition = 17, RULE_modifierDefinition = 18, 
		RULE_modifierInvocation = 19, RULE_functionDefinition = 20, RULE_returnParameters = 21, 
		RULE_modifierList = 22, RULE_eventDefinition = 23, RULE_enumValue = 24, 
		RULE_enumDefinition = 25, RULE_parameterList = 26, RULE_parameter = 27, 
		RULE_eventParameterList = 28, RULE_eventParameter = 29, RULE_functionTypeParameterList = 30, 
		RULE_functionTypeParameter = 31, RULE_variableDeclaration = 32, RULE_typeName = 33, 
		RULE_arrayTypeName = 34, RULE_userDefinedTypeName = 35, RULE_mapping = 36, 
		RULE_functionTypeName = 37, RULE_storageLocation = 38, RULE_stateMutability = 39, 
		RULE_block = 40, RULE_statement = 41, RULE_expressionStatement = 42, RULE_ifStatement = 43, 
		RULE_whileStatement = 44, RULE_simpleStatement = 45, RULE_forStatement = 46, 
		RULE_inlineAssemblyStatement = 47, RULE_doWhileStatement = 48, RULE_continueStatement = 49, 
		RULE_breakStatement = 50, RULE_returnStatement = 51, RULE_throwStatement = 52, 
		RULE_emitStatement = 53, RULE_variableDeclarationStatement = 54, RULE_variableDeclarationList = 55, 
		RULE_identifierList = 56, RULE_elementaryTypeName = 57, RULE_expression = 58, 
		RULE_primaryExpression = 59, RULE_expressionList = 60, RULE_nameValueList = 61, 
		RULE_nameValue = 62, RULE_functionCallArguments = 63, RULE_functionCall = 64, 
		RULE_assemblyBlock = 65, RULE_assemblyItem = 66, RULE_assemblyExpression = 67, 
		RULE_assemblyCall = 68, RULE_assemblyLocalDefinition = 69, RULE_assemblyAssignment = 70, 
		RULE_assemblyIdentifierOrList = 71, RULE_assemblyIdentifierList = 72, 
		RULE_assemblyStackAssignment = 73, RULE_labelDefinition = 74, RULE_assemblySwitch = 75, 
		RULE_assemblyCase = 76, RULE_assemblyFunctionDefinition = 77, RULE_assemblyFunctionReturns = 78, 
		RULE_assemblyFor = 79, RULE_assemblyIf = 80, RULE_assemblyLiteral = 81, 
		RULE_subAssembly = 82, RULE_tupleExpression = 83, RULE_typeNameExpression = 84, 
		RULE_numberLiteral = 85, RULE_identifier = 86;
	public static readonly string[] ruleNames = {
		"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", 
		"versionOperator", "versionConstraint", "importDeclaration", "importDirective", 
		"natSpec", "contractType", "contractDefinition", "inheritanceSpecifier", 
		"contractPart", "stateVariableDeclaration", "usingForDeclaration", "structDefinition", 
		"constructorDefinition", "modifierDefinition", "modifierInvocation", "functionDefinition", 
		"returnParameters", "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
		"parameterList", "parameter", "eventParameterList", "eventParameter", 
		"functionTypeParameterList", "functionTypeParameter", "variableDeclaration", 
		"typeName", "arrayTypeName", "userDefinedTypeName", "mapping", "functionTypeName", 
		"storageLocation", "stateMutability", "block", "statement", "expressionStatement", 
		"ifStatement", "whileStatement", "simpleStatement", "forStatement", "inlineAssemblyStatement", 
		"doWhileStatement", "continueStatement", "breakStatement", "returnStatement", 
		"throwStatement", "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
		"identifierList", "elementaryTypeName", "expression", "primaryExpression", 
		"expressionList", "nameValueList", "nameValue", "functionCallArguments", 
		"functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
		"assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList", 
		"assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", 
		"assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
		"assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression", 
		"typeNameExpression", "numberLiteral", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", 
		"'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'", 
		"'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", 
		"'struct'", "'constructor'", "'modifier'", "'function'", "'returns'", 
		"'event'", "'enum'", "'address'", "'['", "']'", "'.'", "'mapping'", "'=>'", 
		"'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'while'", "'assembly'", 
		"'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", 
		"'byte'", "'++'", "'--'", "'new'", "'+'", "'-'", "'after'", "'delete'", 
		"'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", 
		"'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", 
		"'case'", "'default'", "'->'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", 
		"'continue'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", 
		"'public'", "'pure'", "'type'", "'view'", "'abstract'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NatSpecSingleLine", "NatSpecMultiLine", 
		"Int", "Uint", "Byte", "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral", 
		"DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", 
		"AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ContinueKeyword", 
		"ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
		"PrivateKeyword", "PublicKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
		"AbstractKeyword", "Identifier", "StringLiteral", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Solidity.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SolidityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SolidityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SolidityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SolidityParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext[] pragmaDirective() {
			return GetRuleContexts<PragmaDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext pragmaDirective(int i) {
			return GetRuleContext<PragmaDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext[] importDirective() {
			return GetRuleContexts<ImportDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext importDirective(int i) {
			return GetRuleContext<ImportDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext[] contractDefinition() {
			return GetRuleContexts<ContractDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext contractDefinition(int i) {
			return GetRuleContext<ContractDefinitionContext>(i);
		}
		public SourceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSourceUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSourceUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceUnitContext sourceUnit() {
		SourceUnitContext _localctx = new SourceUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 919554L) != 0 || (((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 134217731L) != 0) {
				{
				State = 177;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 174;
					pragmaDirective();
					}
					break;
				case T__10:
					{
					State = 175;
					importDirective();
					}
					break;
				case T__16:
				case T__17:
				case T__18:
				case NatSpecSingleLine:
				case NatSpecMultiLine:
				case AbstractKeyword:
					{
					State = 176;
					contractDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PragmaNameContext pragmaName() {
			return GetRuleContext<PragmaNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaValueContext pragmaValue() {
			return GetRuleContext<PragmaValueContext>(0);
		}
		public PragmaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDirectiveContext pragmaDirective() {
		PragmaDirectiveContext _localctx = new PragmaDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_pragmaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(T__0);
			State = 185;
			pragmaName();
			State = 186;
			pragmaValue();
			State = 187;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PragmaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaNameContext pragmaName() {
		PragmaNameContext _localctx = new PragmaNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragmaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PragmaValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaValueContext pragmaValue() {
		PragmaValueContext _localctx = new PragmaValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_pragmaValue);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				version();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext[] versionConstraint() {
			return GetRuleContexts<VersionConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext versionConstraint(int i) {
			return GetRuleContext<VersionConstraintContext>(i);
		}
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 8, RULE_version);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			versionConstraint();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1016L) != 0 || _la==VersionLiteral) {
				{
				State = 196;
				versionConstraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionOperatorContext : ParserRuleContext {
		public VersionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionOperatorContext versionOperator() {
		VersionOperatorContext _localctx = new VersionOperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_versionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1016L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionLiteral() { return GetToken(SolidityParser.VersionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VersionOperatorContext versionOperator() {
			return GetRuleContext<VersionOperatorContext>(0);
		}
		public VersionConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionConstraintContext versionConstraint() {
		VersionConstraintContext _localctx = new VersionConstraintContext(Context, State);
		EnterRule(_localctx, 12, RULE_versionConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1016L) != 0) {
				{
				State = 201;
				versionOperator();
				}
			}

			State = 204;
			Match(VersionLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			identifier();
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 207;
				Match(T__9);
				State = 208;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ImportDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDirectiveContext importDirective() {
		ImportDirectiveContext _localctx = new ImportDirectiveContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDirective);
		int _la;
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				Match(T__10);
				State = 212;
				Match(StringLiteral);
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 213;
					Match(T__9);
					State = 214;
					identifier();
					}
				}

				State = 217;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(T__10);
				State = 221;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
					{
					State = 219;
					Match(T__11);
					}
					break;
				case T__12:
				case T__39:
				case Identifier:
					{
					State = 220;
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 223;
					Match(T__9);
					State = 224;
					identifier();
					}
				}

				State = 227;
				Match(T__12);
				State = 228;
				Match(StringLiteral);
				State = 229;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230;
				Match(T__10);
				State = 231;
				Match(T__13);
				State = 232;
				importDeclaration();
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 233;
					Match(T__14);
					State = 234;
					importDeclaration();
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 240;
				Match(T__15);
				State = 241;
				Match(T__12);
				State = 242;
				Match(StringLiteral);
				State = 243;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NatSpecSingleLine() { return GetToken(SolidityParser.NatSpecSingleLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NatSpecMultiLine() { return GetToken(SolidityParser.NatSpecMultiLine, 0); }
		public NatSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNatSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNatSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NatSpecContext natSpec() {
		NatSpecContext _localctx = new NatSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_natSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = TokenStream.LA(1);
			if ( !(_la==NatSpecSingleLine || _la==NatSpecMultiLine) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractTypeContext : ParserRuleContext {
		public ContractTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractTypeContext contractType() {
		ContractTypeContext _localctx = new ContractTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_contractType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContractTypeContext contractType() {
			return GetRuleContext<ContractTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AbstractKeyword() { return GetToken(SolidityParser.AbstractKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext[] inheritanceSpecifier() {
			return GetRuleContexts<InheritanceSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext inheritanceSpecifier(int i) {
			return GetRuleContext<InheritanceSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext[] contractPart() {
			return GetRuleContexts<ContractPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext contractPart(int i) {
			return GetRuleContext<ContractPartContext>(i);
		}
		public ContractDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDefinitionContext contractDefinition() {
		ContractDefinitionContext _localctx = new ContractDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_contractDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 251;
				natSpec();
				}
			}

			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AbstractKeyword) {
				{
				State = 254;
				Match(AbstractKeyword);
				}
			}

			State = 257;
			contractType();
			State = 258;
			identifier();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 259;
				Match(T__19);
				State = 260;
				inheritanceSpecifier();
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 261;
					Match(T__14);
					State = 262;
					inheritanceSpecifier();
					}
					}
					State = 267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 270;
			Match(T__13);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445425560330240L) != 0 || (((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 268435583L) != 0) {
				{
				{
				State = 271;
				contractPart();
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 277;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public InheritanceSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInheritanceSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInheritanceSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritanceSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceSpecifierContext inheritanceSpecifier() {
		InheritanceSpecifierContext _localctx = new InheritanceSpecifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_inheritanceSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			userDefinedTypeName();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 280;
				Match(T__20);
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
					{
					State = 281;
					expressionList();
					}
				}

				State = 284;
				Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StateVariableDeclarationContext stateVariableDeclaration() {
			return GetRuleContext<StateVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForDeclarationContext usingForDeclaration() {
			return GetRuleContext<UsingForDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDefinitionContext constructorDefinition() {
			return GetRuleContext<ConstructorDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierDefinitionContext modifierDefinition() {
			return GetRuleContext<ModifierDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefinitionContext eventDefinition() {
			return GetRuleContext<EventDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public ContractPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractPartContext contractPart() {
		ContractPartContext _localctx = new ContractPartContext(Context, State);
		EnterRule(_localctx, 26, RULE_contractPart);
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				stateVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				usingForDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 289;
				structDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 290;
				constructorDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 291;
				modifierDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 292;
				functionDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 293;
				eventDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 294;
				enumDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ConstantKeyword() { return GetTokens(SolidityParser.ConstantKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword(int i) {
			return GetToken(SolidityParser.ConstantKeyword, i);
		}
		public StateVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateVariableDeclarationContext stateVariableDeclaration() {
		StateVariableDeclarationContext _localctx = new StateVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_stateVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			typeName();
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 209L) != 0) {
				{
				{
				State = 298;
				_la = TokenStream.LA(1);
				if ( !((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 209L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 304;
			identifier();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 305;
				Match(T__8);
				State = 306;
				expression(0);
				}
			}

			State = 309;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UsingForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingForDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingForDeclarationContext usingForDeclaration() {
		UsingForDeclarationContext _localctx = new UsingForDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_usingForDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(T__22);
			State = 312;
			identifier();
			State = 313;
			Match(T__23);
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 314;
				Match(T__11);
				}
				break;
			case T__12:
			case T__27:
			case T__31:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case Identifier:
				{
				State = 315;
				typeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 318;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(T__24);
			State = 321;
			identifier();
			State = 322;
			Match(T__13);
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445422095835136L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 67108895L) != 0) {
				{
				State = 323;
				variableDeclaration();
				State = 324;
				Match(T__1);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445422095835136L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 67108895L) != 0) {
					{
					{
					State = 325;
					variableDeclaration();
					State = 326;
					Match(T__1);
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 335;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterConstructorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitConstructorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDefinitionContext constructorDefinition() {
		ConstructorDefinitionContext _localctx = new ConstructorDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_constructorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(T__25);
			State = 338;
			parameterList();
			State = 339;
			modifierList();
			State = 340;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ModifierDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierDefinitionContext modifierDefinition() {
		ModifierDefinitionContext _localctx = new ModifierDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_modifierDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(T__26);
			State = 343;
			identifier();
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 344;
				parameterList();
				}
			}

			State = 347;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ModifierInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierInvocationContext modifierInvocation() {
		ModifierInvocationContext _localctx = new ModifierInvocationContext(Context, State);
		EnterRule(_localctx, 38, RULE_modifierInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			identifier();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 350;
				Match(T__20);
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
					{
					State = 351;
					expressionList();
					}
				}

				State = 354;
				Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 357;
				natSpec();
				}
			}

			State = 360;
			Match(T__27);
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 361;
				identifier();
				}
			}

			State = 364;
			parameterList();
			State = 365;
			modifierList();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 366;
				returnParameters();
				}
			}

			State = 371;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 369;
				Match(T__1);
				}
				break;
			case T__13:
				{
				State = 370;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnParametersContext returnParameters() {
		ReturnParametersContext _localctx = new ReturnParametersContext(Context, State);
		EnterRule(_localctx, 42, RULE_returnParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(T__28);
			State = 374;
			parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext[] modifierInvocation() {
			return GetRuleContexts<ModifierInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext modifierInvocation(int i) {
			return GetRuleContext<ModifierInvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		public ModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierListContext modifierList() {
		ModifierListContext _localctx = new ModifierListContext(Context, State);
		EnterRule(_localctx, 44, RULE_modifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12 || _la==T__39 || (((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 5621L) != 0) {
				{
				State = 382;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
				case T__39:
				case Identifier:
					{
					State = 376;
					modifierInvocation();
					}
					break;
				case ConstantKeyword:
				case PayableKeyword:
				case PureKeyword:
				case ViewKeyword:
					{
					State = 377;
					stateMutability();
					}
					break;
				case ExternalKeyword:
					{
					State = 378;
					Match(ExternalKeyword);
					}
					break;
				case PublicKeyword:
					{
					State = 379;
					Match(PublicKeyword);
					}
					break;
				case InternalKeyword:
					{
					State = 380;
					Match(InternalKeyword);
					}
					break;
				case PrivateKeyword:
					{
					State = 381;
					Match(PrivateKeyword);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterListContext eventParameterList() {
			return GetRuleContext<EventParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnonymousKeyword() { return GetToken(SolidityParser.AnonymousKeyword, 0); }
		public EventDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefinitionContext eventDefinition() {
		EventDefinitionContext _localctx = new EventDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_eventDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 387;
				natSpec();
				}
			}

			State = 390;
			Match(T__29);
			State = 391;
			identifier();
			State = 392;
			eventParameterList();
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AnonymousKeyword) {
				{
				State = 393;
				Match(AnonymousKeyword);
				}
			}

			State = 396;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(T__30);
			State = 401;
			identifier();
			State = 402;
			Match(T__13);
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 403;
				enumValue();
				}
			}

			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 406;
				Match(T__14);
				State = 407;
				enumValue();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 413;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(T__20);
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445422095835136L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 67108895L) != 0) {
				{
				State = 416;
				parameter();
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 417;
					Match(T__14);
					State = 418;
					parameter();
					}
					}
					State = 423;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 426;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			typeName();
			State = 430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 429;
				storageLocation();
				}
				break;
			}
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 432;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext[] eventParameter() {
			return GetRuleContexts<EventParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext eventParameter(int i) {
			return GetRuleContext<EventParameterContext>(i);
		}
		public EventParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterListContext eventParameterList() {
		EventParameterListContext _localctx = new EventParameterListContext(Context, State);
		EnterRule(_localctx, 56, RULE_eventParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(T__20);
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445422095835136L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 67108895L) != 0) {
				{
				State = 436;
				eventParameter();
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 437;
					Match(T__14);
					State = 438;
					eventParameter();
					}
					}
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 446;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IndexedKeyword() { return GetToken(SolidityParser.IndexedKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterContext eventParameter() {
		EventParameterContext _localctx = new EventParameterContext(Context, State);
		EnterRule(_localctx, 58, RULE_eventParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			typeName();
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IndexedKeyword) {
				{
				State = 449;
				Match(IndexedKeyword);
				}
			}

			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 452;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterContext[] functionTypeParameter() {
			return GetRuleContexts<FunctionTypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterContext functionTypeParameter(int i) {
			return GetRuleContext<FunctionTypeParameterContext>(i);
		}
		public FunctionTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterListContext functionTypeParameterList() {
		FunctionTypeParameterListContext _localctx = new FunctionTypeParameterListContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(T__20);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445422095835136L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 67108895L) != 0) {
				{
				State = 456;
				functionTypeParameter();
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 457;
					Match(T__14);
					State = 458;
					functionTypeParameter();
					}
					}
					State = 463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 466;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public FunctionTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterContext functionTypeParameter() {
		FunctionTypeParameterContext _localctx = new FunctionTypeParameterContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			typeName();
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0) {
				{
				State = 469;
				storageLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			typeName();
			State = 474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 473;
				storageLocation();
				}
				break;
			}
			State = 476;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MappingContext mapping() {
			return GetRuleContext<MappingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeNameContext functionTypeName() {
			return GetRuleContext<FunctionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeName);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				elementaryTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479;
				userDefinedTypeName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 480;
				mapping();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 481;
				arrayTypeName();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 482;
				functionTypeName();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 483;
				Match(T__31);
				State = 484;
				Match(PayableKeyword);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterArrayTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitArrayTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeNameContext arrayTypeName() {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(Context, State);
		EnterRule(_localctx, 68, RULE_arrayTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
				{
				State = 487;
				elementaryTypeName();
				}
				break;
			case T__12:
			case T__39:
			case Identifier:
				{
				State = 488;
				userDefinedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 491;
			Match(T__32);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
				{
				State = 492;
				expression(0);
				}
			}

			State = 495;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UserDefinedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUserDefinedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUserDefinedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedTypeNameContext userDefinedTypeName() {
		UserDefinedTypeNameContext _localctx = new UserDefinedTypeNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_userDefinedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			identifier();
			State = 502;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 498;
					Match(T__34);
					State = 499;
					identifier();
					}
					} 
				}
				State = 504;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MappingContext mapping() {
		MappingContext _localctx = new MappingContext(Context, State);
		EnterRule(_localctx, 72, RULE_mapping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			Match(T__35);
			State = 506;
			Match(T__20);
			State = 507;
			elementaryTypeName();
			State = 508;
			Match(T__36);
			State = 509;
			typeName();
			State = 510;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterListContext[] functionTypeParameterList() {
			return GetRuleContexts<FunctionTypeParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterListContext functionTypeParameterList(int i) {
			return GetRuleContext<FunctionTypeParameterListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		public FunctionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeNameContext functionTypeName() {
		FunctionTypeNameContext _localctx = new FunctionTypeNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(T__27);
			State = 513;
			functionTypeParameterList();
			State = 519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 517;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case InternalKeyword:
						{
						State = 514;
						Match(InternalKeyword);
						}
						break;
					case ExternalKeyword:
						{
						State = 515;
						Match(ExternalKeyword);
						}
						break;
					case ConstantKeyword:
					case PayableKeyword:
					case PureKeyword:
					case ViewKeyword:
						{
						State = 516;
						stateMutability();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 522;
				Match(T__28);
				State = 523;
				functionTypeParameterList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageLocationContext : ParserRuleContext {
		public StorageLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStorageLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStorageLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageLocationContext storageLocation() {
		StorageLocationContext _localctx = new StorageLocationContext(Context, State);
		EnterRule(_localctx, 76, RULE_storageLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateMutabilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PureKeyword() { return GetToken(SolidityParser.PureKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword() { return GetToken(SolidityParser.ConstantKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ViewKeyword() { return GetToken(SolidityParser.ViewKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public StateMutabilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateMutability; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateMutability(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateMutability(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateMutability(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateMutabilityContext stateMutability() {
		StateMutabilityContext _localctx = new StateMutabilityContext(Context, State);
		EnterRule(_localctx, 78, RULE_stateMutability);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			_la = TokenStream.LA(1);
			if ( !((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 1313L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(T__13);
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305837593547268112L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209757663L) != 0) {
				{
				{
				State = 531;
				statement();
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 537;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAssemblyStatementContext inlineAssemblyStatement() {
			return GetRuleContext<InlineAssemblyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmitStatementContext emitStatement() {
			return GetRuleContext<EmitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_statement);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				ifStatement();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540;
				whileStatement();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 541;
				forStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 542;
				block();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 5);
				{
				State = 543;
				inlineAssemblyStatement();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 6);
				{
				State = 544;
				doWhileStatement();
				}
				break;
			case ContinueKeyword:
				EnterOuterAlt(_localctx, 7);
				{
				State = 545;
				continueStatement();
				}
				break;
			case BreakKeyword:
				EnterOuterAlt(_localctx, 8);
				{
				State = 546;
				breakStatement();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 9);
				{
				State = 547;
				returnStatement();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 10);
				{
				State = 548;
				throwStatement();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 11);
				{
				State = 549;
				emitStatement();
				}
				break;
			case T__3:
			case T__12:
			case T__20:
			case T__27:
			case T__31:
			case T__32:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 12);
				{
				State = 550;
				simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			expression(0);
			State = 554;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(T__40);
			State = 557;
			Match(T__20);
			State = 558;
			expression(0);
			State = 559;
			Match(T__21);
			State = 560;
			statement();
			State = 563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 561;
				Match(T__41);
				State = 562;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(T__42);
			State = 566;
			Match(T__20);
			State = 567;
			expression(0);
			State = 568;
			Match(T__21);
			State = 569;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 571;
				variableDeclarationStatement();
				}
				break;
			case 2:
				{
				State = 572;
				expressionStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(T__23);
			State = 576;
			Match(T__20);
			State = 579;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__20:
			case T__27:
			case T__31:
			case T__32:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				{
				State = 577;
				simpleStatement();
				}
				break;
			case T__1:
				{
				State = 578;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 583;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__20:
			case T__31:
			case T__32:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				{
				State = 581;
				expressionStatement();
				}
				break;
			case T__1:
				{
				State = 582;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
				{
				State = 585;
				expression(0);
				}
			}

			State = 588;
			Match(T__21);
			State = 589;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAssemblyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		public InlineAssemblyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAssemblyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInlineAssemblyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInlineAssemblyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineAssemblyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineAssemblyStatementContext inlineAssemblyStatement() {
		InlineAssemblyStatementContext _localctx = new InlineAssemblyStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_inlineAssemblyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(T__43);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringLiteral) {
				{
				State = 592;
				Match(StringLiteral);
				}
			}

			State = 595;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			Match(T__44);
			State = 598;
			statement();
			State = 599;
			Match(T__42);
			State = 600;
			Match(T__20);
			State = 601;
			expression(0);
			State = 602;
			Match(T__21);
			State = 603;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(ContinueKeyword);
			State = 606;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(BreakKeyword);
			State = 609;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(T__45);
			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
				{
				State = 612;
				expression(0);
				}
			}

			State = 615;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(T__46);
			State = 618;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public EmitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEmitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEmitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmitStatementContext emitStatement() {
		EmitStatementContext _localctx = new EmitStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_emitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(T__47);
			State = 621;
			functionCall();
			State = 622;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 624;
				Match(T__48);
				State = 625;
				identifierList();
				}
				break;
			case 2:
				{
				State = 626;
				variableDeclaration();
				}
				break;
			case 3:
				{
				State = 627;
				Match(T__20);
				State = 628;
				variableDeclarationList();
				State = 629;
				Match(T__21);
				}
				break;
			}
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 633;
				Match(T__8);
				State = 634;
				expression(0);
				}
			}

			State = 637;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 110, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445422095835136L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 67108895L) != 0) {
				{
				State = 639;
				variableDeclaration();
				}
			}

			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 642;
				Match(T__14);
				State = 644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445422095835136L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 67108895L) != 0) {
					{
					State = 643;
					variableDeclaration();
					}
				}

				}
				}
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 112, RULE_identifierList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(T__20);
			State = 658;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__12 || _la==T__39 || _la==Identifier) {
						{
						State = 652;
						identifier();
						}
					}

					State = 655;
					Match(T__14);
					}
					} 
				}
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 661;
				identifier();
				}
			}

			State = 664;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(SolidityParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uint() { return GetToken(SolidityParser.Uint, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byte() { return GetToken(SolidityParser.Byte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fixed() { return GetToken(SolidityParser.Fixed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ufixed() { return GetToken(SolidityParser.Ufixed, 0); }
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterElementaryTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitElementaryTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_elementaryTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8444253596286976L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 31L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 116;
		EnterRecursionRule(_localctx, 116, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 669;
				Match(T__54);
				State = 670;
				typeName();
				}
				break;
			case 2:
				{
				State = 671;
				Match(T__20);
				State = 672;
				expression(0);
				State = 673;
				Match(T__21);
				}
				break;
			case 3:
				{
				State = 675;
				_la = TokenStream.LA(1);
				if ( !(_la==T__52 || _la==T__53) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 676;
				expression(19);
				}
				break;
			case 4:
				{
				State = 677;
				_la = TokenStream.LA(1);
				if ( !(_la==T__55 || _la==T__56) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 678;
				expression(18);
				}
				break;
			case 5:
				{
				State = 679;
				_la = TokenStream.LA(1);
				if ( !(_la==T__57 || _la==T__58) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 680;
				expression(17);
				}
				break;
			case 6:
				{
				State = 681;
				Match(T__59);
				State = 682;
				expression(16);
				}
				break;
			case 7:
				{
				State = 683;
				Match(T__3);
				State = 684;
				expression(15);
				}
				break;
			case 8:
				{
				State = 685;
				primaryExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 747;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 745;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 688;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 689;
						Match(T__60);
						State = 690;
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 691;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 692;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018427383808L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 693;
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 694;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 695;
						_la = TokenStream.LA(1);
						if ( !(_la==T__55 || _la==T__56) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 696;
						expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 697;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 698;
						_la = TokenStream.LA(1);
						if ( !(_la==T__63 || _la==T__64) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 699;
						expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 700;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 701;
						Match(T__65);
						State = 702;
						expression(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 703;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 704;
						Match(T__2);
						State = 705;
						expression(10);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 706;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 707;
						Match(T__66);
						State = 708;
						expression(9);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 709;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 710;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 711;
						expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 712;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 713;
						_la = TokenStream.LA(1);
						if ( !(_la==T__67 || _la==T__68) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 714;
						expression(7);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 715;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 716;
						Match(T__69);
						State = 717;
						expression(6);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 718;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 719;
						Match(T__70);
						State = 720;
						expression(5);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 721;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 722;
						Match(T__71);
						State = 723;
						expression(0);
						State = 724;
						Match(T__72);
						State = 725;
						expression(4);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 727;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 728;
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || (((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1023L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 729;
						expression(3);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 730;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 731;
						_la = TokenStream.LA(1);
						if ( !(_la==T__52 || _la==T__53) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 732;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 733;
						Match(T__32);
						State = 734;
						expression(0);
						State = 735;
						Match(T__33);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 737;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 738;
						Match(T__20);
						State = 739;
						functionCallArguments();
						State = 740;
						Match(T__21);
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 742;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 743;
						Match(T__34);
						State = 744;
						identifier();
						}
						break;
					}
					} 
				}
				State = 749;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeKeyword() { return GetToken(SolidityParser.TypeKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameExpressionContext typeNameExpression() {
			return GetRuleContext<TypeNameExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_primaryExpression);
		try {
			State = 766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 750;
				Match(BooleanLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 751;
				numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 752;
				Match(HexLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 753;
				Match(StringLiteral);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 754;
				identifier();
				State = 757;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 755;
					Match(T__32);
					State = 756;
					Match(T__33);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 759;
				Match(TypeKeyword);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 760;
				tupleExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 761;
				typeNameExpression();
				State = 764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 762;
					Match(T__32);
					State = 763;
					Match(T__33);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 120, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			expression(0);
			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 769;
				Match(T__14);
				State = 770;
				expression(0);
				}
				}
				State = 775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext[] nameValue() {
			return GetRuleContexts<NameValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext nameValue(int i) {
			return GetRuleContext<NameValueContext>(i);
		}
		public NameValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueListContext nameValueList() {
		NameValueListContext _localctx = new NameValueListContext(Context, State);
		EnterRule(_localctx, 122, RULE_nameValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			nameValue();
			State = 781;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 777;
					Match(T__14);
					State = 778;
					nameValue();
					}
					} 
				}
				State = 783;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 784;
				Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueContext nameValue() {
		NameValueContext _localctx = new NameValueContext(Context, State);
		EnterRule(_localctx, 124, RULE_nameValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			identifier();
			State = 788;
			Match(T__72);
			State = 789;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCallArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCallArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 126, RULE_functionCallArguments);
		int _la;
		try {
			State = 799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 791;
				Match(T__13);
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__12 || _la==T__39 || _la==Identifier) {
					{
					State = 792;
					nameValueList();
					}
				}

				State = 795;
				Match(T__15);
				}
				break;
			case T__3:
			case T__12:
			case T__20:
			case T__21:
			case T__31:
			case T__32:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
					{
					State = 796;
					expressionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 128, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			expression(0);
			State = 802;
			Match(T__20);
			State = 803;
			functionCallArguments();
			State = 804;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext[] assemblyItem() {
			return GetRuleContexts<AssemblyItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext assemblyItem(int i) {
			return GetRuleContext<AssemblyItemContext>(i);
		}
		public AssemblyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyBlockContext assemblyBlock() {
		AssemblyBlockContext _localctx = new AssemblyBlockContext(Context, State);
		EnterRule(_localctx, 130, RULE_assemblyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(T__13);
			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4594863674777600L) != 0 || (((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 103100907533L) != 0) {
				{
				{
				State = 807;
				assemblyItem();
				}
				}
				State = 812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 813;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
			return GetRuleContext<AssemblyLocalDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyAssignmentContext assemblyAssignment() {
			return GetRuleContext<AssemblyAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyStackAssignmentContext assemblyStackAssignment() {
			return GetRuleContext<AssemblyStackAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefinitionContext labelDefinition() {
			return GetRuleContext<LabelDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblySwitchContext assemblySwitch() {
			return GetRuleContext<AssemblySwitchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
			return GetRuleContext<AssemblyFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyForContext assemblyFor() {
			return GetRuleContext<AssemblyForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIfContext assemblyIf() {
			return GetRuleContext<AssemblyIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubAssemblyContext subAssembly() {
			return GetRuleContext<SubAssemblyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		public AssemblyItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyItemContext assemblyItem() {
		AssemblyItemContext _localctx = new AssemblyItemContext(Context, State);
		EnterRule(_localctx, 132, RULE_assemblyItem);
		try {
			State = 832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 815;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				assemblyBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 817;
				assemblyExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 818;
				assemblyLocalDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 819;
				assemblyAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 820;
				assemblyStackAssignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 821;
				labelDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 822;
				assemblySwitch();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 823;
				assemblyFunctionDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 824;
				assemblyFor();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 825;
				assemblyIf();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 826;
				Match(BreakKeyword);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 827;
				Match(ContinueKeyword);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 828;
				subAssembly();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 829;
				numberLiteral();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 830;
				Match(StringLiteral);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 831;
				Match(HexLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		public AssemblyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyExpressionContext assemblyExpression() {
		AssemblyExpressionContext _localctx = new AssemblyExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_assemblyExpression);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__31:
			case T__39:
			case T__45:
			case T__51:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 834;
				assemblyCall();
				}
				break;
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 835;
				assemblyLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 136, RULE_assemblyCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__45:
				{
				State = 838;
				Match(T__45);
				}
				break;
			case T__31:
				{
				State = 839;
				Match(T__31);
				}
				break;
			case T__51:
				{
				State = 840;
				Match(T__51);
				}
				break;
			case T__12:
			case T__39:
			case Identifier:
				{
				State = 841;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 844;
				Match(T__20);
				State = 846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4575072178151424L) != 0 || (((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 1572875L) != 0) {
					{
					State = 845;
					assemblyExpression();
					}
				}

				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 848;
					Match(T__14);
					State = 849;
					assemblyExpression();
					}
					}
					State = 854;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 855;
				Match(T__21);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLocalDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLocalDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLocalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLocalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLocalDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
		AssemblyLocalDefinitionContext _localctx = new AssemblyLocalDefinitionContext(Context, State);
		EnterRule(_localctx, 138, RULE_assemblyLocalDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			Match(T__83);
			State = 859;
			assemblyIdentifierOrList();
			State = 862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__84) {
				{
				State = 860;
				Match(T__84);
				State = 861;
				assemblyExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyAssignmentContext assemblyAssignment() {
		AssemblyAssignmentContext _localctx = new AssemblyAssignmentContext(Context, State);
		EnterRule(_localctx, 140, RULE_assemblyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			assemblyIdentifierOrList();
			State = 865;
			Match(T__84);
			State = 866;
			assemblyExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierOrListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyIdentifierOrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierOrList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierOrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierOrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIdentifierOrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
		AssemblyIdentifierOrListContext _localctx = new AssemblyIdentifierOrListContext(Context, State);
		EnterRule(_localctx, 142, RULE_assemblyIdentifierOrList);
		try {
			State = 873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__39:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868;
				identifier();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 869;
				Match(T__20);
				State = 870;
				assemblyIdentifierList();
				State = 871;
				Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AssemblyIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierListContext assemblyIdentifierList() {
		AssemblyIdentifierListContext _localctx = new AssemblyIdentifierListContext(Context, State);
		EnterRule(_localctx, 144, RULE_assemblyIdentifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			identifier();
			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 876;
				Match(T__14);
				State = 877;
				identifier();
				}
				}
				State = 882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyStackAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyStackAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyStackAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyStackAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyStackAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyStackAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyStackAssignmentContext assemblyStackAssignment() {
		AssemblyStackAssignmentContext _localctx = new AssemblyStackAssignmentContext(Context, State);
		EnterRule(_localctx, 146, RULE_assemblyStackAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(T__85);
			State = 884;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefinitionContext labelDefinition() {
		LabelDefinitionContext _localctx = new LabelDefinitionContext(Context, State);
		EnterRule(_localctx, 148, RULE_labelDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			identifier();
			State = 887;
			Match(T__72);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblySwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext[] assemblyCase() {
			return GetRuleContexts<AssemblyCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext assemblyCase(int i) {
			return GetRuleContext<AssemblyCaseContext>(i);
		}
		public AssemblySwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblySwitch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblySwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblySwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblySwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblySwitchContext assemblySwitch() {
		AssemblySwitchContext _localctx = new AssemblySwitchContext(Context, State);
		EnterRule(_localctx, 150, RULE_assemblySwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			Match(T__86);
			State = 890;
			assemblyExpression();
			State = 894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__87 || _la==T__88) {
				{
				{
				State = 891;
				assemblyCase();
				}
				}
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCaseContext assemblyCase() {
		AssemblyCaseContext _localctx = new AssemblyCaseContext(Context, State);
		EnterRule(_localctx, 152, RULE_assemblyCase);
		try {
			State = 903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__87:
				EnterOuterAlt(_localctx, 1);
				{
				State = 897;
				Match(T__87);
				State = 898;
				assemblyLiteral();
				State = 899;
				assemblyBlock();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 901;
				Match(T__88);
				State = 902;
				assemblyBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
			return GetRuleContext<AssemblyFunctionReturnsContext>(0);
		}
		public AssemblyFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
		AssemblyFunctionDefinitionContext _localctx = new AssemblyFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 154, RULE_assemblyFunctionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(T__27);
			State = 906;
			identifier();
			State = 907;
			Match(T__20);
			State = 909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 908;
				assemblyIdentifierList();
				}
			}

			State = 911;
			Match(T__21);
			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__89) {
				{
				State = 912;
				assemblyFunctionReturns();
				}
			}

			State = 915;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionReturnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyFunctionReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionReturns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
		AssemblyFunctionReturnsContext _localctx = new AssemblyFunctionReturnsContext(Context, State);
		EnterRule(_localctx, 156, RULE_assemblyFunctionReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 917;
			Match(T__89);
			State = 918;
			assemblyIdentifierList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext[] assemblyBlock() {
			return GetRuleContexts<AssemblyBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock(int i) {
			return GetRuleContext<AssemblyBlockContext>(i);
		}
		public AssemblyForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyForContext assemblyFor() {
		AssemblyForContext _localctx = new AssemblyForContext(Context, State);
		EnterRule(_localctx, 158, RULE_assemblyFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(T__23);
			State = 923;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 921;
				assemblyBlock();
				}
				break;
			case T__12:
			case T__31:
			case T__39:
			case T__45:
			case T__51:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case Identifier:
			case StringLiteral:
				{
				State = 922;
				assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 925;
			assemblyExpression();
			State = 928;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 926;
				assemblyBlock();
				}
				break;
			case T__12:
			case T__31:
			case T__39:
			case T__45:
			case T__51:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case Identifier:
			case StringLiteral:
				{
				State = 927;
				assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 930;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIfContext assemblyIf() {
		AssemblyIfContext _localctx = new AssemblyIfContext(Context, State);
		EnterRule(_localctx, 160, RULE_assemblyIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932;
			Match(T__40);
			State = 933;
			assemblyExpression();
			State = 934;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		public AssemblyLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLiteralContext assemblyLiteral() {
		AssemblyLiteralContext _localctx = new AssemblyLiteralContext(Context, State);
		EnterRule(_localctx, 162, RULE_assemblyLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			_la = TokenStream.LA(1);
			if ( !((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 1048587L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubAssemblyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public SubAssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subAssembly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSubAssembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSubAssembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubAssemblyContext subAssembly() {
		SubAssemblyContext _localctx = new SubAssemblyContext(Context, State);
		EnterRule(_localctx, 164, RULE_subAssembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			Match(T__43);
			State = 939;
			identifier();
			State = 940;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_tupleExpression);
		int _la;
		try {
			State = 968;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942;
				Match(T__20);
				{
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
					{
					State = 943;
					expression(0);
					}
				}

				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 946;
					Match(T__14);
					State = 948;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
						{
						State = 947;
						expression(0);
						}
					}

					}
					}
					State = 954;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 955;
				Match(T__21);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				Match(T__32);
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281171658907664L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 209716703L) != 0) {
					{
					State = 957;
					expression(0);
					State = 962;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__14) {
						{
						{
						State = 958;
						Match(T__14);
						State = 959;
						expression(0);
						}
						}
						State = 964;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 967;
				Match(T__33);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public TypeNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameExpressionContext typeNameExpression() {
		TypeNameExpressionContext _localctx = new TypeNameExpressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_typeNameExpression);
		try {
			State = 972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
				EnterOuterAlt(_localctx, 1);
				{
				State = 970;
				elementaryTypeName();
				}
				break;
			case T__12:
			case T__39:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 971;
				userDefinedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberUnit() { return GetToken(SolidityParser.NumberUnit, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 170, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974;
			_la = TokenStream.LA(1);
			if ( !(_la==DecimalNumber || _la==HexNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 975;
				Match(NumberUnit);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SolidityParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__39 || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 58: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 23);
		case 15: return Precpred(Context, 22);
		case 16: return Precpred(Context, 21);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,123,981,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,1,0,1,0,1,0,5,0,178,8,0,10,0,12,0,181,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,194,8,3,1,4,1,4,3,4,198,8,4,1,
		5,1,5,1,6,3,6,203,8,6,1,6,1,6,1,7,1,7,1,7,3,7,210,8,7,1,8,1,8,1,8,1,8,
		3,8,216,8,8,1,8,1,8,1,8,1,8,3,8,222,8,8,1,8,1,8,3,8,226,8,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,5,8,236,8,8,10,8,12,8,239,9,8,1,8,1,8,1,8,1,8,1,
		8,3,8,246,8,8,1,9,1,9,1,10,1,10,1,11,3,11,253,8,11,1,11,3,11,256,8,11,
		1,11,1,11,1,11,1,11,1,11,1,11,5,11,264,8,11,10,11,12,11,267,9,11,3,11,
		269,8,11,1,11,1,11,5,11,273,8,11,10,11,12,11,276,9,11,1,11,1,11,1,12,1,
		12,1,12,3,12,283,8,12,1,12,3,12,286,8,12,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,3,13,296,8,13,1,14,1,14,5,14,300,8,14,10,14,12,14,303,9,14,1,
		14,1,14,1,14,3,14,308,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,3,15,317,
		8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,329,8,16,10,
		16,12,16,332,9,16,3,16,334,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,
		1,18,1,18,3,18,346,8,18,1,18,1,18,1,19,1,19,1,19,3,19,353,8,19,1,19,3,
		19,356,8,19,1,20,3,20,359,8,20,1,20,1,20,3,20,363,8,20,1,20,1,20,1,20,
		3,20,368,8,20,1,20,1,20,3,20,372,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
		22,1,22,1,22,5,22,383,8,22,10,22,12,22,386,9,22,1,23,3,23,389,8,23,1,23,
		1,23,1,23,1,23,3,23,395,8,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,3,
		25,405,8,25,1,25,1,25,5,25,409,8,25,10,25,12,25,412,9,25,1,25,1,25,1,26,
		1,26,1,26,1,26,5,26,420,8,26,10,26,12,26,423,9,26,3,26,425,8,26,1,26,1,
		26,1,27,1,27,3,27,431,8,27,1,27,3,27,434,8,27,1,28,1,28,1,28,1,28,5,28,
		440,8,28,10,28,12,28,443,9,28,3,28,445,8,28,1,28,1,28,1,29,1,29,3,29,451,
		8,29,1,29,3,29,454,8,29,1,30,1,30,1,30,1,30,5,30,460,8,30,10,30,12,30,
		463,9,30,3,30,465,8,30,1,30,1,30,1,31,1,31,3,31,471,8,31,1,32,1,32,3,32,
		475,8,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,486,8,33,1,
		34,1,34,3,34,490,8,34,1,34,1,34,3,34,494,8,34,1,34,1,34,1,35,1,35,1,35,
		5,35,501,8,35,10,35,12,35,504,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		1,37,1,37,1,37,1,37,1,37,5,37,518,8,37,10,37,12,37,521,9,37,1,37,1,37,
		3,37,525,8,37,1,38,1,38,1,39,1,39,1,40,1,40,5,40,533,8,40,10,40,12,40,
		536,9,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,3,41,552,8,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		3,43,564,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,3,45,574,8,45,1,
		46,1,46,1,46,1,46,3,46,580,8,46,1,46,1,46,3,46,584,8,46,1,46,3,46,587,
		8,46,1,46,1,46,1,46,1,47,1,47,3,47,594,8,47,1,47,1,47,1,48,1,48,1,48,1,
		48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,3,51,614,
		8,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
		1,54,1,54,1,54,3,54,632,8,54,1,54,1,54,3,54,636,8,54,1,54,1,54,1,55,3,
		55,641,8,55,1,55,1,55,3,55,645,8,55,5,55,647,8,55,10,55,12,55,650,9,55,
		1,56,1,56,3,56,654,8,56,1,56,5,56,657,8,56,10,56,12,56,660,9,56,1,56,3,
		56,663,8,56,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
		1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,687,8,58,1,58,1,
		58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
		58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
		58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
		58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,
		58,746,8,58,10,58,12,58,749,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,
		59,758,8,59,1,59,1,59,1,59,1,59,1,59,3,59,765,8,59,3,59,767,8,59,1,60,
		1,60,1,60,5,60,772,8,60,10,60,12,60,775,9,60,1,61,1,61,1,61,5,61,780,8,
		61,10,61,12,61,783,9,61,1,61,3,61,786,8,61,1,62,1,62,1,62,1,62,1,63,1,
		63,3,63,794,8,63,1,63,1,63,3,63,798,8,63,3,63,800,8,63,1,64,1,64,1,64,
		1,64,1,64,1,65,1,65,5,65,809,8,65,10,65,12,65,812,9,65,1,65,1,65,1,66,
		1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,1,66,3,66,833,8,66,1,67,1,67,3,67,837,8,67,1,68,1,68,1,68,1,68,3,
		68,843,8,68,1,68,1,68,3,68,847,8,68,1,68,1,68,5,68,851,8,68,10,68,12,68,
		854,9,68,1,68,3,68,857,8,68,1,69,1,69,1,69,1,69,3,69,863,8,69,1,70,1,70,
		1,70,1,70,1,71,1,71,1,71,1,71,1,71,3,71,874,8,71,1,72,1,72,1,72,5,72,879,
		8,72,10,72,12,72,882,9,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,
		5,75,893,8,75,10,75,12,75,896,9,75,1,76,1,76,1,76,1,76,1,76,1,76,3,76,
		904,8,76,1,77,1,77,1,77,1,77,3,77,910,8,77,1,77,1,77,3,77,914,8,77,1,77,
		1,77,1,78,1,78,1,78,1,79,1,79,1,79,3,79,924,8,79,1,79,1,79,1,79,3,79,929,
		8,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,82,1,83,
		1,83,3,83,945,8,83,1,83,1,83,3,83,949,8,83,5,83,951,8,83,10,83,12,83,954,
		9,83,1,83,1,83,1,83,1,83,1,83,5,83,961,8,83,10,83,12,83,964,9,83,3,83,
		966,8,83,1,83,3,83,969,8,83,1,84,1,84,3,84,973,8,84,1,85,1,85,3,85,977,
		8,85,1,86,1,86,1,86,0,1,116,87,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,0,18,1,0,3,9,1,0,91,92,1,0,17,19,3,
		0,107,107,111,111,113,114,1,0,38,40,4,0,107,107,112,112,115,115,117,117,
		3,0,32,32,49,52,93,97,1,0,53,54,1,0,56,57,1,0,58,59,2,0,12,12,62,63,1,
		0,64,65,1,0,5,8,1,0,68,69,2,0,9,9,74,83,3,0,100,101,103,103,120,120,1,
		0,100,101,3,0,13,13,40,40,119,119,1074,0,179,1,0,0,0,2,184,1,0,0,0,4,189,
		1,0,0,0,6,193,1,0,0,0,8,195,1,0,0,0,10,199,1,0,0,0,12,202,1,0,0,0,14,206,
		1,0,0,0,16,245,1,0,0,0,18,247,1,0,0,0,20,249,1,0,0,0,22,252,1,0,0,0,24,
		279,1,0,0,0,26,295,1,0,0,0,28,297,1,0,0,0,30,311,1,0,0,0,32,320,1,0,0,
		0,34,337,1,0,0,0,36,342,1,0,0,0,38,349,1,0,0,0,40,358,1,0,0,0,42,373,1,
		0,0,0,44,384,1,0,0,0,46,388,1,0,0,0,48,398,1,0,0,0,50,400,1,0,0,0,52,415,
		1,0,0,0,54,428,1,0,0,0,56,435,1,0,0,0,58,448,1,0,0,0,60,455,1,0,0,0,62,
		468,1,0,0,0,64,472,1,0,0,0,66,485,1,0,0,0,68,489,1,0,0,0,70,497,1,0,0,
		0,72,505,1,0,0,0,74,512,1,0,0,0,76,526,1,0,0,0,78,528,1,0,0,0,80,530,1,
		0,0,0,82,551,1,0,0,0,84,553,1,0,0,0,86,556,1,0,0,0,88,565,1,0,0,0,90,573,
		1,0,0,0,92,575,1,0,0,0,94,591,1,0,0,0,96,597,1,0,0,0,98,605,1,0,0,0,100,
		608,1,0,0,0,102,611,1,0,0,0,104,617,1,0,0,0,106,620,1,0,0,0,108,631,1,
		0,0,0,110,640,1,0,0,0,112,651,1,0,0,0,114,666,1,0,0,0,116,686,1,0,0,0,
		118,766,1,0,0,0,120,768,1,0,0,0,122,776,1,0,0,0,124,787,1,0,0,0,126,799,
		1,0,0,0,128,801,1,0,0,0,130,806,1,0,0,0,132,832,1,0,0,0,134,836,1,0,0,
		0,136,842,1,0,0,0,138,858,1,0,0,0,140,864,1,0,0,0,142,873,1,0,0,0,144,
		875,1,0,0,0,146,883,1,0,0,0,148,886,1,0,0,0,150,889,1,0,0,0,152,903,1,
		0,0,0,154,905,1,0,0,0,156,917,1,0,0,0,158,920,1,0,0,0,160,932,1,0,0,0,
		162,936,1,0,0,0,164,938,1,0,0,0,166,968,1,0,0,0,168,972,1,0,0,0,170,974,
		1,0,0,0,172,978,1,0,0,0,174,178,3,2,1,0,175,178,3,16,8,0,176,178,3,22,
		11,0,177,174,1,0,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,
		177,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,5,
		0,0,1,183,1,1,0,0,0,184,185,5,1,0,0,185,186,3,4,2,0,186,187,3,6,3,0,187,
		188,5,2,0,0,188,3,1,0,0,0,189,190,3,172,86,0,190,5,1,0,0,0,191,194,3,8,
		4,0,192,194,3,116,58,0,193,191,1,0,0,0,193,192,1,0,0,0,194,7,1,0,0,0,195,
		197,3,12,6,0,196,198,3,12,6,0,197,196,1,0,0,0,197,198,1,0,0,0,198,9,1,
		0,0,0,199,200,7,0,0,0,200,11,1,0,0,0,201,203,3,10,5,0,202,201,1,0,0,0,
		202,203,1,0,0,0,203,204,1,0,0,0,204,205,5,98,0,0,205,13,1,0,0,0,206,209,
		3,172,86,0,207,208,5,10,0,0,208,210,3,172,86,0,209,207,1,0,0,0,209,210,
		1,0,0,0,210,15,1,0,0,0,211,212,5,11,0,0,212,215,5,120,0,0,213,214,5,10,
		0,0,214,216,3,172,86,0,215,213,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,
		217,246,5,2,0,0,218,221,5,11,0,0,219,222,5,12,0,0,220,222,3,172,86,0,221,
		219,1,0,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,224,5,10,0,0,224,226,3,
		172,86,0,225,223,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,5,13,
		0,0,228,229,5,120,0,0,229,246,5,2,0,0,230,231,5,11,0,0,231,232,5,14,0,
		0,232,237,3,14,7,0,233,234,5,15,0,0,234,236,3,14,7,0,235,233,1,0,0,0,236,
		239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,1,
		0,0,0,240,241,5,16,0,0,241,242,5,13,0,0,242,243,5,120,0,0,243,244,5,2,
		0,0,244,246,1,0,0,0,245,211,1,0,0,0,245,218,1,0,0,0,245,230,1,0,0,0,246,
		17,1,0,0,0,247,248,7,1,0,0,248,19,1,0,0,0,249,250,7,2,0,0,250,21,1,0,0,
		0,251,253,3,18,9,0,252,251,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,
		256,5,118,0,0,255,254,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,
		3,20,10,0,258,268,3,172,86,0,259,260,5,20,0,0,260,265,3,24,12,0,261,262,
		5,15,0,0,262,264,3,24,12,0,263,261,1,0,0,0,264,267,1,0,0,0,265,263,1,0,
		0,0,265,266,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,268,259,1,0,0,0,268,
		269,1,0,0,0,269,270,1,0,0,0,270,274,5,14,0,0,271,273,3,26,13,0,272,271,
		1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,
		0,276,274,1,0,0,0,277,278,5,16,0,0,278,23,1,0,0,0,279,285,3,70,35,0,280,
		282,5,21,0,0,281,283,3,120,60,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,
		1,0,0,0,284,286,5,22,0,0,285,280,1,0,0,0,285,286,1,0,0,0,286,25,1,0,0,
		0,287,296,3,28,14,0,288,296,3,30,15,0,289,296,3,32,16,0,290,296,3,34,17,
		0,291,296,3,36,18,0,292,296,3,40,20,0,293,296,3,46,23,0,294,296,3,50,25,
		0,295,287,1,0,0,0,295,288,1,0,0,0,295,289,1,0,0,0,295,290,1,0,0,0,295,
		291,1,0,0,0,295,292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,0,296,27,1,0,
		0,0,297,301,3,66,33,0,298,300,7,3,0,0,299,298,1,0,0,0,300,303,1,0,0,0,
		301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,301,1,0,0,0,304,307,
		3,172,86,0,305,306,5,9,0,0,306,308,3,116,58,0,307,305,1,0,0,0,307,308,
		1,0,0,0,308,309,1,0,0,0,309,310,5,2,0,0,310,29,1,0,0,0,311,312,5,23,0,
		0,312,313,3,172,86,0,313,316,5,24,0,0,314,317,5,12,0,0,315,317,3,66,33,
		0,316,314,1,0,0,0,316,315,1,0,0,0,317,318,1,0,0,0,318,319,5,2,0,0,319,
		31,1,0,0,0,320,321,5,25,0,0,321,322,3,172,86,0,322,333,5,14,0,0,323,324,
		3,64,32,0,324,330,5,2,0,0,325,326,3,64,32,0,326,327,5,2,0,0,327,329,1,
		0,0,0,328,325,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,
		331,334,1,0,0,0,332,330,1,0,0,0,333,323,1,0,0,0,333,334,1,0,0,0,334,335,
		1,0,0,0,335,336,5,16,0,0,336,33,1,0,0,0,337,338,5,26,0,0,338,339,3,52,
		26,0,339,340,3,44,22,0,340,341,3,80,40,0,341,35,1,0,0,0,342,343,5,27,0,
		0,343,345,3,172,86,0,344,346,3,52,26,0,345,344,1,0,0,0,345,346,1,0,0,0,
		346,347,1,0,0,0,347,348,3,80,40,0,348,37,1,0,0,0,349,355,3,172,86,0,350,
		352,5,21,0,0,351,353,3,120,60,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,
		1,0,0,0,354,356,5,22,0,0,355,350,1,0,0,0,355,356,1,0,0,0,356,39,1,0,0,
		0,357,359,3,18,9,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,
		362,5,28,0,0,361,363,3,172,86,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,
		1,0,0,0,364,365,3,52,26,0,365,367,3,44,22,0,366,368,3,42,21,0,367,366,
		1,0,0,0,367,368,1,0,0,0,368,371,1,0,0,0,369,372,5,2,0,0,370,372,3,80,40,
		0,371,369,1,0,0,0,371,370,1,0,0,0,372,41,1,0,0,0,373,374,5,29,0,0,374,
		375,3,52,26,0,375,43,1,0,0,0,376,383,3,38,19,0,377,383,3,78,39,0,378,383,
		5,109,0,0,379,383,5,114,0,0,380,383,5,111,0,0,381,383,5,113,0,0,382,376,
		1,0,0,0,382,377,1,0,0,0,382,378,1,0,0,0,382,379,1,0,0,0,382,380,1,0,0,
		0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,
		45,1,0,0,0,386,384,1,0,0,0,387,389,3,18,9,0,388,387,1,0,0,0,388,389,1,
		0,0,0,389,390,1,0,0,0,390,391,5,30,0,0,391,392,3,172,86,0,392,394,3,56,
		28,0,393,395,5,105,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,
		396,397,5,2,0,0,397,47,1,0,0,0,398,399,3,172,86,0,399,49,1,0,0,0,400,401,
		5,31,0,0,401,402,3,172,86,0,402,404,5,14,0,0,403,405,3,48,24,0,404,403,
		1,0,0,0,404,405,1,0,0,0,405,410,1,0,0,0,406,407,5,15,0,0,407,409,3,48,
		24,0,408,406,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,
		413,1,0,0,0,412,410,1,0,0,0,413,414,5,16,0,0,414,51,1,0,0,0,415,424,5,
		21,0,0,416,421,3,54,27,0,417,418,5,15,0,0,418,420,3,54,27,0,419,417,1,
		0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,425,1,0,0,0,
		423,421,1,0,0,0,424,416,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,
		5,22,0,0,427,53,1,0,0,0,428,430,3,66,33,0,429,431,3,76,38,0,430,429,1,
		0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,434,3,172,86,0,433,432,1,0,0,
		0,433,434,1,0,0,0,434,55,1,0,0,0,435,444,5,21,0,0,436,441,3,58,29,0,437,
		438,5,15,0,0,438,440,3,58,29,0,439,437,1,0,0,0,440,443,1,0,0,0,441,439,
		1,0,0,0,441,442,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,444,436,1,0,0,
		0,444,445,1,0,0,0,445,446,1,0,0,0,446,447,5,22,0,0,447,57,1,0,0,0,448,
		450,3,66,33,0,449,451,5,110,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,453,
		1,0,0,0,452,454,3,172,86,0,453,452,1,0,0,0,453,454,1,0,0,0,454,59,1,0,
		0,0,455,464,5,21,0,0,456,461,3,62,31,0,457,458,5,15,0,0,458,460,3,62,31,
		0,459,457,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,
		465,1,0,0,0,463,461,1,0,0,0,464,456,1,0,0,0,464,465,1,0,0,0,465,466,1,
		0,0,0,466,467,5,22,0,0,467,61,1,0,0,0,468,470,3,66,33,0,469,471,3,76,38,
		0,470,469,1,0,0,0,470,471,1,0,0,0,471,63,1,0,0,0,472,474,3,66,33,0,473,
		475,3,76,38,0,474,473,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,477,
		3,172,86,0,477,65,1,0,0,0,478,486,3,114,57,0,479,486,3,70,35,0,480,486,
		3,72,36,0,481,486,3,68,34,0,482,486,3,74,37,0,483,484,5,32,0,0,484,486,
		5,112,0,0,485,478,1,0,0,0,485,479,1,0,0,0,485,480,1,0,0,0,485,481,1,0,
		0,0,485,482,1,0,0,0,485,483,1,0,0,0,486,67,1,0,0,0,487,490,3,114,57,0,
		488,490,3,70,35,0,489,487,1,0,0,0,489,488,1,0,0,0,490,491,1,0,0,0,491,
		493,5,33,0,0,492,494,3,116,58,0,493,492,1,0,0,0,493,494,1,0,0,0,494,495,
		1,0,0,0,495,496,5,34,0,0,496,69,1,0,0,0,497,502,3,172,86,0,498,499,5,35,
		0,0,499,501,3,172,86,0,500,498,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,
		502,503,1,0,0,0,503,71,1,0,0,0,504,502,1,0,0,0,505,506,5,36,0,0,506,507,
		5,21,0,0,507,508,3,114,57,0,508,509,5,37,0,0,509,510,3,66,33,0,510,511,
		5,22,0,0,511,73,1,0,0,0,512,513,5,28,0,0,513,519,3,60,30,0,514,518,5,111,
		0,0,515,518,5,109,0,0,516,518,3,78,39,0,517,514,1,0,0,0,517,515,1,0,0,
		0,517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,
		524,1,0,0,0,521,519,1,0,0,0,522,523,5,29,0,0,523,525,3,60,30,0,524,522,
		1,0,0,0,524,525,1,0,0,0,525,75,1,0,0,0,526,527,7,4,0,0,527,77,1,0,0,0,
		528,529,7,5,0,0,529,79,1,0,0,0,530,534,5,14,0,0,531,533,3,82,41,0,532,
		531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,
		0,0,0,536,534,1,0,0,0,537,538,5,16,0,0,538,81,1,0,0,0,539,552,3,86,43,
		0,540,552,3,88,44,0,541,552,3,92,46,0,542,552,3,80,40,0,543,552,3,94,47,
		0,544,552,3,96,48,0,545,552,3,98,49,0,546,552,3,100,50,0,547,552,3,102,
		51,0,548,552,3,104,52,0,549,552,3,106,53,0,550,552,3,90,45,0,551,539,1,
		0,0,0,551,540,1,0,0,0,551,541,1,0,0,0,551,542,1,0,0,0,551,543,1,0,0,0,
		551,544,1,0,0,0,551,545,1,0,0,0,551,546,1,0,0,0,551,547,1,0,0,0,551,548,
		1,0,0,0,551,549,1,0,0,0,551,550,1,0,0,0,552,83,1,0,0,0,553,554,3,116,58,
		0,554,555,5,2,0,0,555,85,1,0,0,0,556,557,5,41,0,0,557,558,5,21,0,0,558,
		559,3,116,58,0,559,560,5,22,0,0,560,563,3,82,41,0,561,562,5,42,0,0,562,
		564,3,82,41,0,563,561,1,0,0,0,563,564,1,0,0,0,564,87,1,0,0,0,565,566,5,
		43,0,0,566,567,5,21,0,0,567,568,3,116,58,0,568,569,5,22,0,0,569,570,3,
		82,41,0,570,89,1,0,0,0,571,574,3,108,54,0,572,574,3,84,42,0,573,571,1,
		0,0,0,573,572,1,0,0,0,574,91,1,0,0,0,575,576,5,24,0,0,576,579,5,21,0,0,
		577,580,3,90,45,0,578,580,5,2,0,0,579,577,1,0,0,0,579,578,1,0,0,0,580,
		583,1,0,0,0,581,584,3,84,42,0,582,584,5,2,0,0,583,581,1,0,0,0,583,582,
		1,0,0,0,584,586,1,0,0,0,585,587,3,116,58,0,586,585,1,0,0,0,586,587,1,0,
		0,0,587,588,1,0,0,0,588,589,5,22,0,0,589,590,3,82,41,0,590,93,1,0,0,0,
		591,593,5,44,0,0,592,594,5,120,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,
		595,1,0,0,0,595,596,3,130,65,0,596,95,1,0,0,0,597,598,5,45,0,0,598,599,
		3,82,41,0,599,600,5,43,0,0,600,601,5,21,0,0,601,602,3,116,58,0,602,603,
		5,22,0,0,603,604,5,2,0,0,604,97,1,0,0,0,605,606,5,108,0,0,606,607,5,2,
		0,0,607,99,1,0,0,0,608,609,5,106,0,0,609,610,5,2,0,0,610,101,1,0,0,0,611,
		613,5,46,0,0,612,614,3,116,58,0,613,612,1,0,0,0,613,614,1,0,0,0,614,615,
		1,0,0,0,615,616,5,2,0,0,616,103,1,0,0,0,617,618,5,47,0,0,618,619,5,2,0,
		0,619,105,1,0,0,0,620,621,5,48,0,0,621,622,3,128,64,0,622,623,5,2,0,0,
		623,107,1,0,0,0,624,625,5,49,0,0,625,632,3,112,56,0,626,632,3,64,32,0,
		627,628,5,21,0,0,628,629,3,110,55,0,629,630,5,22,0,0,630,632,1,0,0,0,631,
		624,1,0,0,0,631,626,1,0,0,0,631,627,1,0,0,0,632,635,1,0,0,0,633,634,5,
		9,0,0,634,636,3,116,58,0,635,633,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,
		0,637,638,5,2,0,0,638,109,1,0,0,0,639,641,3,64,32,0,640,639,1,0,0,0,640,
		641,1,0,0,0,641,648,1,0,0,0,642,644,5,15,0,0,643,645,3,64,32,0,644,643,
		1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,642,1,0,0,0,647,650,1,0,0,
		0,648,646,1,0,0,0,648,649,1,0,0,0,649,111,1,0,0,0,650,648,1,0,0,0,651,
		658,5,21,0,0,652,654,3,172,86,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,
		1,0,0,0,655,657,5,15,0,0,656,653,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,
		0,658,659,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,661,663,3,172,86,0,662,
		661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,665,5,22,0,0,665,113,1,
		0,0,0,666,667,7,6,0,0,667,115,1,0,0,0,668,669,6,58,-1,0,669,670,5,55,0,
		0,670,687,3,66,33,0,671,672,5,21,0,0,672,673,3,116,58,0,673,674,5,22,0,
		0,674,687,1,0,0,0,675,676,7,7,0,0,676,687,3,116,58,19,677,678,7,8,0,0,
		678,687,3,116,58,18,679,680,7,9,0,0,680,687,3,116,58,17,681,682,5,60,0,
		0,682,687,3,116,58,16,683,684,5,4,0,0,684,687,3,116,58,15,685,687,3,118,
		59,0,686,668,1,0,0,0,686,671,1,0,0,0,686,675,1,0,0,0,686,677,1,0,0,0,686,
		679,1,0,0,0,686,681,1,0,0,0,686,683,1,0,0,0,686,685,1,0,0,0,687,747,1,
		0,0,0,688,689,10,14,0,0,689,690,5,61,0,0,690,746,3,116,58,15,691,692,10,
		13,0,0,692,693,7,10,0,0,693,746,3,116,58,14,694,695,10,12,0,0,695,696,
		7,8,0,0,696,746,3,116,58,13,697,698,10,11,0,0,698,699,7,11,0,0,699,746,
		3,116,58,12,700,701,10,10,0,0,701,702,5,66,0,0,702,746,3,116,58,11,703,
		704,10,9,0,0,704,705,5,3,0,0,705,746,3,116,58,10,706,707,10,8,0,0,707,
		708,5,67,0,0,708,746,3,116,58,9,709,710,10,7,0,0,710,711,7,12,0,0,711,
		746,3,116,58,8,712,713,10,6,0,0,713,714,7,13,0,0,714,746,3,116,58,7,715,
		716,10,5,0,0,716,717,5,70,0,0,717,746,3,116,58,6,718,719,10,4,0,0,719,
		720,5,71,0,0,720,746,3,116,58,5,721,722,10,3,0,0,722,723,5,72,0,0,723,
		724,3,116,58,0,724,725,5,73,0,0,725,726,3,116,58,4,726,746,1,0,0,0,727,
		728,10,2,0,0,728,729,7,14,0,0,729,746,3,116,58,3,730,731,10,25,0,0,731,
		746,7,7,0,0,732,733,10,23,0,0,733,734,5,33,0,0,734,735,3,116,58,0,735,
		736,5,34,0,0,736,746,1,0,0,0,737,738,10,22,0,0,738,739,5,21,0,0,739,740,
		3,126,63,0,740,741,5,22,0,0,741,746,1,0,0,0,742,743,10,21,0,0,743,744,
		5,35,0,0,744,746,3,172,86,0,745,688,1,0,0,0,745,691,1,0,0,0,745,694,1,
		0,0,0,745,697,1,0,0,0,745,700,1,0,0,0,745,703,1,0,0,0,745,706,1,0,0,0,
		745,709,1,0,0,0,745,712,1,0,0,0,745,715,1,0,0,0,745,718,1,0,0,0,745,721,
		1,0,0,0,745,727,1,0,0,0,745,730,1,0,0,0,745,732,1,0,0,0,745,737,1,0,0,
		0,745,742,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,
		117,1,0,0,0,749,747,1,0,0,0,750,767,5,99,0,0,751,767,3,170,85,0,752,767,
		5,103,0,0,753,767,5,120,0,0,754,757,3,172,86,0,755,756,5,33,0,0,756,758,
		5,34,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,767,1,0,0,0,759,767,5,116,
		0,0,760,767,3,166,83,0,761,764,3,168,84,0,762,763,5,33,0,0,763,765,5,34,
		0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,750,1,0,0,0,766,
		751,1,0,0,0,766,752,1,0,0,0,766,753,1,0,0,0,766,754,1,0,0,0,766,759,1,
		0,0,0,766,760,1,0,0,0,766,761,1,0,0,0,767,119,1,0,0,0,768,773,3,116,58,
		0,769,770,5,15,0,0,770,772,3,116,58,0,771,769,1,0,0,0,772,775,1,0,0,0,
		773,771,1,0,0,0,773,774,1,0,0,0,774,121,1,0,0,0,775,773,1,0,0,0,776,781,
		3,124,62,0,777,778,5,15,0,0,778,780,3,124,62,0,779,777,1,0,0,0,780,783,
		1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,
		0,784,786,5,15,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,123,1,0,0,0,787,
		788,3,172,86,0,788,789,5,73,0,0,789,790,3,116,58,0,790,125,1,0,0,0,791,
		793,5,14,0,0,792,794,3,122,61,0,793,792,1,0,0,0,793,794,1,0,0,0,794,795,
		1,0,0,0,795,800,5,16,0,0,796,798,3,120,60,0,797,796,1,0,0,0,797,798,1,
		0,0,0,798,800,1,0,0,0,799,791,1,0,0,0,799,797,1,0,0,0,800,127,1,0,0,0,
		801,802,3,116,58,0,802,803,5,21,0,0,803,804,3,126,63,0,804,805,5,22,0,
		0,805,129,1,0,0,0,806,810,5,14,0,0,807,809,3,132,66,0,808,807,1,0,0,0,
		809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,813,1,0,0,0,812,810,
		1,0,0,0,813,814,5,16,0,0,814,131,1,0,0,0,815,833,3,172,86,0,816,833,3,
		130,65,0,817,833,3,134,67,0,818,833,3,138,69,0,819,833,3,140,70,0,820,
		833,3,146,73,0,821,833,3,148,74,0,822,833,3,150,75,0,823,833,3,154,77,
		0,824,833,3,158,79,0,825,833,3,160,80,0,826,833,5,106,0,0,827,833,5,108,
		0,0,828,833,3,164,82,0,829,833,3,170,85,0,830,833,5,120,0,0,831,833,5,
		103,0,0,832,815,1,0,0,0,832,816,1,0,0,0,832,817,1,0,0,0,832,818,1,0,0,
		0,832,819,1,0,0,0,832,820,1,0,0,0,832,821,1,0,0,0,832,822,1,0,0,0,832,
		823,1,0,0,0,832,824,1,0,0,0,832,825,1,0,0,0,832,826,1,0,0,0,832,827,1,
		0,0,0,832,828,1,0,0,0,832,829,1,0,0,0,832,830,1,0,0,0,832,831,1,0,0,0,
		833,133,1,0,0,0,834,837,3,136,68,0,835,837,3,162,81,0,836,834,1,0,0,0,
		836,835,1,0,0,0,837,135,1,0,0,0,838,843,5,46,0,0,839,843,5,32,0,0,840,
		843,5,52,0,0,841,843,3,172,86,0,842,838,1,0,0,0,842,839,1,0,0,0,842,840,
		1,0,0,0,842,841,1,0,0,0,843,856,1,0,0,0,844,846,5,21,0,0,845,847,3,134,
		67,0,846,845,1,0,0,0,846,847,1,0,0,0,847,852,1,0,0,0,848,849,5,15,0,0,
		849,851,3,134,67,0,850,848,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,
		853,1,0,0,0,853,855,1,0,0,0,854,852,1,0,0,0,855,857,5,22,0,0,856,844,1,
		0,0,0,856,857,1,0,0,0,857,137,1,0,0,0,858,859,5,84,0,0,859,862,3,142,71,
		0,860,861,5,85,0,0,861,863,3,134,67,0,862,860,1,0,0,0,862,863,1,0,0,0,
		863,139,1,0,0,0,864,865,3,142,71,0,865,866,5,85,0,0,866,867,3,134,67,0,
		867,141,1,0,0,0,868,874,3,172,86,0,869,870,5,21,0,0,870,871,3,144,72,0,
		871,872,5,22,0,0,872,874,1,0,0,0,873,868,1,0,0,0,873,869,1,0,0,0,874,143,
		1,0,0,0,875,880,3,172,86,0,876,877,5,15,0,0,877,879,3,172,86,0,878,876,
		1,0,0,0,879,882,1,0,0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,145,1,0,0,
		0,882,880,1,0,0,0,883,884,5,86,0,0,884,885,3,172,86,0,885,147,1,0,0,0,
		886,887,3,172,86,0,887,888,5,73,0,0,888,149,1,0,0,0,889,890,5,87,0,0,890,
		894,3,134,67,0,891,893,3,152,76,0,892,891,1,0,0,0,893,896,1,0,0,0,894,
		892,1,0,0,0,894,895,1,0,0,0,895,151,1,0,0,0,896,894,1,0,0,0,897,898,5,
		88,0,0,898,899,3,162,81,0,899,900,3,130,65,0,900,904,1,0,0,0,901,902,5,
		89,0,0,902,904,3,130,65,0,903,897,1,0,0,0,903,901,1,0,0,0,904,153,1,0,
		0,0,905,906,5,28,0,0,906,907,3,172,86,0,907,909,5,21,0,0,908,910,3,144,
		72,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,913,5,22,0,0,
		912,914,3,156,78,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,
		916,3,130,65,0,916,155,1,0,0,0,917,918,5,90,0,0,918,919,3,144,72,0,919,
		157,1,0,0,0,920,923,5,24,0,0,921,924,3,130,65,0,922,924,3,134,67,0,923,
		921,1,0,0,0,923,922,1,0,0,0,924,925,1,0,0,0,925,928,3,134,67,0,926,929,
		3,130,65,0,927,929,3,134,67,0,928,926,1,0,0,0,928,927,1,0,0,0,929,930,
		1,0,0,0,930,931,3,130,65,0,931,159,1,0,0,0,932,933,5,41,0,0,933,934,3,
		134,67,0,934,935,3,130,65,0,935,161,1,0,0,0,936,937,7,15,0,0,937,163,1,
		0,0,0,938,939,5,44,0,0,939,940,3,172,86,0,940,941,3,130,65,0,941,165,1,
		0,0,0,942,944,5,21,0,0,943,945,3,116,58,0,944,943,1,0,0,0,944,945,1,0,
		0,0,945,952,1,0,0,0,946,948,5,15,0,0,947,949,3,116,58,0,948,947,1,0,0,
		0,948,949,1,0,0,0,949,951,1,0,0,0,950,946,1,0,0,0,951,954,1,0,0,0,952,
		950,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,952,1,0,0,0,955,969,5,
		22,0,0,956,965,5,33,0,0,957,962,3,116,58,0,958,959,5,15,0,0,959,961,3,
		116,58,0,960,958,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,
		0,963,966,1,0,0,0,964,962,1,0,0,0,965,957,1,0,0,0,965,966,1,0,0,0,966,
		967,1,0,0,0,967,969,5,34,0,0,968,942,1,0,0,0,968,956,1,0,0,0,969,167,1,
		0,0,0,970,973,3,114,57,0,971,973,3,70,35,0,972,970,1,0,0,0,972,971,1,0,
		0,0,973,169,1,0,0,0,974,976,7,16,0,0,975,977,5,102,0,0,976,975,1,0,0,0,
		976,977,1,0,0,0,977,171,1,0,0,0,978,979,7,17,0,0,979,173,1,0,0,0,109,177,
		179,193,197,202,209,215,221,225,237,245,252,255,265,268,274,282,285,295,
		301,307,316,330,333,345,352,355,358,362,367,371,382,384,388,394,404,410,
		421,424,430,433,441,444,450,453,461,464,470,474,485,489,493,502,517,519,
		524,534,551,563,573,579,583,586,593,613,631,635,640,644,648,653,658,662,
		686,745,747,757,764,766,773,781,785,793,797,799,810,832,836,842,846,852,
		856,862,873,880,894,903,909,913,923,928,944,948,952,962,965,968,972,976
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
