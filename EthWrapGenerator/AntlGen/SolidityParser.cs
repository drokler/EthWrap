//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/TrembovetskiNA/source/repos/EthWrap/EthWrapGenerator\Solidity.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SolidityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, NatSpecSingleLine=91, NatSpecMultiLine=92, 
		Int=93, Uint=94, Byte=95, Fixed=96, Ufixed=97, VersionLiteral=98, BooleanLiteral=99, 
		DecimalNumber=100, HexNumber=101, NumberUnit=102, HexLiteral=103, ReservedKeyword=104, 
		AnonymousKeyword=105, BreakKeyword=106, ConstantKeyword=107, ContinueKeyword=108, 
		ExternalKeyword=109, IndexedKeyword=110, InternalKeyword=111, PayableKeyword=112, 
		PrivateKeyword=113, PublicKeyword=114, PureKeyword=115, TypeKeyword=116, 
		ViewKeyword=117, Identifier=118, StringLiteral=119, WS=120, COMMENT=121, 
		LINE_COMMENT=122;
	public const int
		RULE_sourceUnit = 0, RULE_pragmaDirective = 1, RULE_pragmaName = 2, RULE_pragmaValue = 3, 
		RULE_version = 4, RULE_versionOperator = 5, RULE_versionConstraint = 6, 
		RULE_importDeclaration = 7, RULE_importDirective = 8, RULE_natSpec = 9, 
		RULE_contractDefinition = 10, RULE_inheritanceSpecifier = 11, RULE_contractPart = 12, 
		RULE_stateVariableDeclaration = 13, RULE_usingForDeclaration = 14, RULE_structDefinition = 15, 
		RULE_constructorDefinition = 16, RULE_modifierDefinition = 17, RULE_modifierInvocation = 18, 
		RULE_functionDefinition = 19, RULE_returnParameters = 20, RULE_modifierList = 21, 
		RULE_eventDefinition = 22, RULE_enumValue = 23, RULE_enumDefinition = 24, 
		RULE_parameterList = 25, RULE_parameter = 26, RULE_eventParameterList = 27, 
		RULE_eventParameter = 28, RULE_functionTypeParameterList = 29, RULE_functionTypeParameter = 30, 
		RULE_variableDeclaration = 31, RULE_typeName = 32, RULE_userDefinedTypeName = 33, 
		RULE_mapping = 34, RULE_functionTypeName = 35, RULE_storageLocation = 36, 
		RULE_stateMutability = 37, RULE_block = 38, RULE_statement = 39, RULE_expressionStatement = 40, 
		RULE_ifStatement = 41, RULE_whileStatement = 42, RULE_simpleStatement = 43, 
		RULE_forStatement = 44, RULE_inlineAssemblyStatement = 45, RULE_doWhileStatement = 46, 
		RULE_continueStatement = 47, RULE_breakStatement = 48, RULE_returnStatement = 49, 
		RULE_throwStatement = 50, RULE_emitStatement = 51, RULE_variableDeclarationStatement = 52, 
		RULE_variableDeclarationList = 53, RULE_identifierList = 54, RULE_elementaryTypeName = 55, 
		RULE_expression = 56, RULE_primaryExpression = 57, RULE_expressionList = 58, 
		RULE_nameValueList = 59, RULE_nameValue = 60, RULE_functionCallArguments = 61, 
		RULE_functionCall = 62, RULE_assemblyBlock = 63, RULE_assemblyItem = 64, 
		RULE_assemblyExpression = 65, RULE_assemblyCall = 66, RULE_assemblyLocalDefinition = 67, 
		RULE_assemblyAssignment = 68, RULE_assemblyIdentifierOrList = 69, RULE_assemblyIdentifierList = 70, 
		RULE_assemblyStackAssignment = 71, RULE_labelDefinition = 72, RULE_assemblySwitch = 73, 
		RULE_assemblyCase = 74, RULE_assemblyFunctionDefinition = 75, RULE_assemblyFunctionReturns = 76, 
		RULE_assemblyFor = 77, RULE_assemblyIf = 78, RULE_assemblyLiteral = 79, 
		RULE_subAssembly = 80, RULE_tupleExpression = 81, RULE_typeNameExpression = 82, 
		RULE_numberLiteral = 83, RULE_identifier = 84;
	public static readonly string[] ruleNames = {
		"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", 
		"versionOperator", "versionConstraint", "importDeclaration", "importDirective", 
		"natSpec", "contractDefinition", "inheritanceSpecifier", "contractPart", 
		"stateVariableDeclaration", "usingForDeclaration", "structDefinition", 
		"constructorDefinition", "modifierDefinition", "modifierInvocation", "functionDefinition", 
		"returnParameters", "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
		"parameterList", "parameter", "eventParameterList", "eventParameter", 
		"functionTypeParameterList", "functionTypeParameter", "variableDeclaration", 
		"typeName", "userDefinedTypeName", "mapping", "functionTypeName", "storageLocation", 
		"stateMutability", "block", "statement", "expressionStatement", "ifStatement", 
		"whileStatement", "simpleStatement", "forStatement", "inlineAssemblyStatement", 
		"doWhileStatement", "continueStatement", "breakStatement", "returnStatement", 
		"throwStatement", "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
		"identifierList", "elementaryTypeName", "expression", "primaryExpression", 
		"expressionList", "nameValueList", "nameValue", "functionCallArguments", 
		"functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
		"assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList", 
		"assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", 
		"assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
		"assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression", 
		"typeNameExpression", "numberLiteral", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", 
		"'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'", 
		"'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", 
		"'struct'", "'constructor'", "'modifier'", "'function'", "'returns'", 
		"'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", 
		"'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'while'", "'assembly'", 
		"'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", 
		"'byte'", "'++'", "'--'", "'new'", "'+'", "'-'", "'after'", "'delete'", 
		"'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", 
		"'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", 
		"'case'", "'default'", "'->'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", 
		"'continue'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", 
		"'public'", "'pure'", "'type'", "'view'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NatSpecSingleLine", "NatSpecMultiLine", 
		"Int", "Uint", "Byte", "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral", 
		"DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", 
		"AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ContinueKeyword", 
		"ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
		"PrivateKeyword", "PublicKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
		"Identifier", "StringLiteral", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Solidity.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SolidityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SolidityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SolidityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SolidityParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext[] pragmaDirective() {
			return GetRuleContexts<PragmaDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext pragmaDirective(int i) {
			return GetRuleContext<PragmaDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext[] importDirective() {
			return GetRuleContexts<ImportDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext importDirective(int i) {
			return GetRuleContext<ImportDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext[] contractDefinition() {
			return GetRuleContexts<ContractDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext contractDefinition(int i) {
			return GetRuleContext<ContractDefinitionContext>(i);
		}
		public SourceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSourceUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSourceUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceUnitContext sourceUnit() {
		SourceUnitContext _localctx = new SourceUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 919554L) != 0 || _la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 173;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 170;
					pragmaDirective();
					}
					break;
				case T__10:
					{
					State = 171;
					importDirective();
					}
					break;
				case T__16:
				case T__17:
				case T__18:
				case NatSpecSingleLine:
				case NatSpecMultiLine:
					{
					State = 172;
					contractDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PragmaNameContext pragmaName() {
			return GetRuleContext<PragmaNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaValueContext pragmaValue() {
			return GetRuleContext<PragmaValueContext>(0);
		}
		public PragmaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDirectiveContext pragmaDirective() {
		PragmaDirectiveContext _localctx = new PragmaDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_pragmaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(T__0);
			State = 181;
			pragmaName();
			State = 182;
			pragmaValue();
			State = 183;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PragmaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaNameContext pragmaName() {
		PragmaNameContext _localctx = new PragmaNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragmaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PragmaValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaValueContext pragmaValue() {
		PragmaValueContext _localctx = new PragmaValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_pragmaValue);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				version();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext[] versionConstraint() {
			return GetRuleContexts<VersionConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext versionConstraint(int i) {
			return GetRuleContext<VersionConstraintContext>(i);
		}
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 8, RULE_version);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			versionConstraint();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1016L) != 0 || _la==VersionLiteral) {
				{
				State = 192;
				versionConstraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionOperatorContext : ParserRuleContext {
		public VersionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionOperatorContext versionOperator() {
		VersionOperatorContext _localctx = new VersionOperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_versionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1016L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionLiteral() { return GetToken(SolidityParser.VersionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VersionOperatorContext versionOperator() {
			return GetRuleContext<VersionOperatorContext>(0);
		}
		public VersionConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionConstraintContext versionConstraint() {
		VersionConstraintContext _localctx = new VersionConstraintContext(Context, State);
		EnterRule(_localctx, 12, RULE_versionConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1016L) != 0) {
				{
				State = 197;
				versionOperator();
				}
			}

			State = 200;
			Match(VersionLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			identifier();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 203;
				Match(T__9);
				State = 204;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ImportDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDirectiveContext importDirective() {
		ImportDirectiveContext _localctx = new ImportDirectiveContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDirective);
		int _la;
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				Match(T__10);
				State = 208;
				Match(StringLiteral);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 209;
					Match(T__9);
					State = 210;
					identifier();
					}
				}

				State = 213;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				Match(T__10);
				State = 217;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
					{
					State = 215;
					Match(T__11);
					}
					break;
				case T__12:
				case T__39:
				case Identifier:
					{
					State = 216;
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 219;
					Match(T__9);
					State = 220;
					identifier();
					}
				}

				State = 223;
				Match(T__12);
				State = 224;
				Match(StringLiteral);
				State = 225;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226;
				Match(T__10);
				State = 227;
				Match(T__13);
				State = 228;
				importDeclaration();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 229;
					Match(T__14);
					State = 230;
					importDeclaration();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236;
				Match(T__15);
				State = 237;
				Match(T__12);
				State = 238;
				Match(StringLiteral);
				State = 239;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NatSpecSingleLine() { return GetToken(SolidityParser.NatSpecSingleLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NatSpecMultiLine() { return GetToken(SolidityParser.NatSpecMultiLine, 0); }
		public NatSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNatSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNatSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NatSpecContext natSpec() {
		NatSpecContext _localctx = new NatSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_natSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = TokenStream.LA(1);
			if ( !(_la==NatSpecSingleLine || _la==NatSpecMultiLine) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext[] inheritanceSpecifier() {
			return GetRuleContexts<InheritanceSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext inheritanceSpecifier(int i) {
			return GetRuleContext<InheritanceSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext[] contractPart() {
			return GetRuleContexts<ContractPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext contractPart(int i) {
			return GetRuleContext<ContractPartContext>(i);
		}
		public ContractDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDefinitionContext contractDefinition() {
		ContractDefinitionContext _localctx = new ContractDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_contractDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 245;
				natSpec();
				}
			}

			State = 248;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 249;
			identifier();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 250;
				Match(T__19);
				State = 251;
				inheritanceSpecifier();
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 252;
					Match(T__14);
					State = 253;
					inheritanceSpecifier();
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 261;
			Match(T__13);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445438445232128L) != 0 || (((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 134217855L) != 0) {
				{
				{
				State = 262;
				contractPart();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public InheritanceSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInheritanceSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInheritanceSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritanceSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceSpecifierContext inheritanceSpecifier() {
		InheritanceSpecifierContext _localctx = new InheritanceSpecifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_inheritanceSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			userDefinedTypeName();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 271;
				Match(T__20);
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
					{
					State = 272;
					expressionList();
					}
				}

				State = 275;
				Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StateVariableDeclarationContext stateVariableDeclaration() {
			return GetRuleContext<StateVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForDeclarationContext usingForDeclaration() {
			return GetRuleContext<UsingForDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDefinitionContext constructorDefinition() {
			return GetRuleContext<ConstructorDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierDefinitionContext modifierDefinition() {
			return GetRuleContext<ModifierDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefinitionContext eventDefinition() {
			return GetRuleContext<EventDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public ContractPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractPartContext contractPart() {
		ContractPartContext _localctx = new ContractPartContext(Context, State);
		EnterRule(_localctx, 24, RULE_contractPart);
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				stateVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279;
				usingForDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 280;
				structDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281;
				constructorDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 282;
				modifierDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 283;
				functionDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 284;
				eventDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 285;
				enumDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ConstantKeyword() { return GetTokens(SolidityParser.ConstantKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword(int i) {
			return GetToken(SolidityParser.ConstantKeyword, i);
		}
		public StateVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateVariableDeclarationContext stateVariableDeclaration() {
		StateVariableDeclarationContext _localctx = new StateVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_stateVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			typeName(0);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 209L) != 0) {
				{
				{
				State = 289;
				_la = TokenStream.LA(1);
				if ( !((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 209L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 295;
			identifier();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 296;
				Match(T__8);
				State = 297;
				expression(0);
				}
			}

			State = 300;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UsingForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingForDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingForDeclarationContext usingForDeclaration() {
		UsingForDeclarationContext _localctx = new UsingForDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_usingForDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(T__22);
			State = 303;
			identifier();
			State = 304;
			Match(T__23);
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 305;
				Match(T__11);
				}
				break;
			case T__12:
			case T__27:
			case T__33:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case Identifier:
				{
				State = 306;
				typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 309;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(T__24);
			State = 312;
			identifier();
			State = 313;
			Match(T__13);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445434980737024L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 33554463L) != 0) {
				{
				State = 314;
				variableDeclaration();
				State = 315;
				Match(T__1);
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445434980737024L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 33554463L) != 0) {
					{
					{
					State = 316;
					variableDeclaration();
					State = 317;
					Match(T__1);
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 326;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterConstructorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitConstructorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDefinitionContext constructorDefinition() {
		ConstructorDefinitionContext _localctx = new ConstructorDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_constructorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(T__25);
			State = 329;
			parameterList();
			State = 330;
			modifierList();
			State = 331;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ModifierDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierDefinitionContext modifierDefinition() {
		ModifierDefinitionContext _localctx = new ModifierDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_modifierDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(T__26);
			State = 334;
			identifier();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 335;
				parameterList();
				}
			}

			State = 338;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ModifierInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierInvocationContext modifierInvocation() {
		ModifierInvocationContext _localctx = new ModifierInvocationContext(Context, State);
		EnterRule(_localctx, 36, RULE_modifierInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			identifier();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 341;
				Match(T__20);
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
					{
					State = 342;
					expressionList();
					}
				}

				State = 345;
				Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 348;
				natSpec();
				}
			}

			State = 351;
			Match(T__27);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 352;
				identifier();
				}
			}

			State = 355;
			parameterList();
			State = 356;
			modifierList();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 357;
				returnParameters();
				}
			}

			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 360;
				Match(T__1);
				}
				break;
			case T__13:
				{
				State = 361;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnParametersContext returnParameters() {
		ReturnParametersContext _localctx = new ReturnParametersContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(T__28);
			State = 365;
			parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext[] modifierInvocation() {
			return GetRuleContexts<ModifierInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext modifierInvocation(int i) {
			return GetRuleContext<ModifierInvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		public ModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierListContext modifierList() {
		ModifierListContext _localctx = new ModifierListContext(Context, State);
		EnterRule(_localctx, 42, RULE_modifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12 || _la==T__39 || (((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 3573L) != 0) {
				{
				State = 373;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
				case T__39:
				case Identifier:
					{
					State = 367;
					modifierInvocation();
					}
					break;
				case ConstantKeyword:
				case PayableKeyword:
				case PureKeyword:
				case ViewKeyword:
					{
					State = 368;
					stateMutability();
					}
					break;
				case ExternalKeyword:
					{
					State = 369;
					Match(ExternalKeyword);
					}
					break;
				case PublicKeyword:
					{
					State = 370;
					Match(PublicKeyword);
					}
					break;
				case InternalKeyword:
					{
					State = 371;
					Match(InternalKeyword);
					}
					break;
				case PrivateKeyword:
					{
					State = 372;
					Match(PrivateKeyword);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterListContext eventParameterList() {
			return GetRuleContext<EventParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnonymousKeyword() { return GetToken(SolidityParser.AnonymousKeyword, 0); }
		public EventDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefinitionContext eventDefinition() {
		EventDefinitionContext _localctx = new EventDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_eventDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 378;
				natSpec();
				}
			}

			State = 381;
			Match(T__29);
			State = 382;
			identifier();
			State = 383;
			eventParameterList();
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AnonymousKeyword) {
				{
				State = 384;
				Match(AnonymousKeyword);
				}
			}

			State = 387;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(T__30);
			State = 392;
			identifier();
			State = 393;
			Match(T__13);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 394;
				enumValue();
				}
			}

			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 397;
				Match(T__14);
				State = 398;
				enumValue();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 404;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(T__20);
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445434980737024L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 33554463L) != 0) {
				{
				State = 407;
				parameter();
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 408;
					Match(T__14);
					State = 409;
					parameter();
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 417;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			typeName(0);
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 420;
				storageLocation();
				}
				break;
			}
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 423;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext[] eventParameter() {
			return GetRuleContexts<EventParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext eventParameter(int i) {
			return GetRuleContext<EventParameterContext>(i);
		}
		public EventParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterListContext eventParameterList() {
		EventParameterListContext _localctx = new EventParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_eventParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(T__20);
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445434980737024L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 33554463L) != 0) {
				{
				State = 427;
				eventParameter();
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 428;
					Match(T__14);
					State = 429;
					eventParameter();
					}
					}
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 437;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IndexedKeyword() { return GetToken(SolidityParser.IndexedKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterContext eventParameter() {
		EventParameterContext _localctx = new EventParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_eventParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			typeName(0);
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IndexedKeyword) {
				{
				State = 440;
				Match(IndexedKeyword);
				}
			}

			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 443;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterContext[] functionTypeParameter() {
			return GetRuleContexts<FunctionTypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterContext functionTypeParameter(int i) {
			return GetRuleContext<FunctionTypeParameterContext>(i);
		}
		public FunctionTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterListContext functionTypeParameterList() {
		FunctionTypeParameterListContext _localctx = new FunctionTypeParameterListContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(T__20);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445434980737024L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 33554463L) != 0) {
				{
				State = 447;
				functionTypeParameter();
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 448;
					Match(T__14);
					State = 449;
					functionTypeParameter();
					}
					}
					State = 454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 457;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public FunctionTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterContext functionTypeParameter() {
		FunctionTypeParameterContext _localctx = new FunctionTypeParameterContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			typeName(0);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0) {
				{
				State = 460;
				storageLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			typeName(0);
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 464;
				storageLocation();
				}
				break;
			}
			State = 467;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MappingContext mapping() {
			return GetRuleContext<MappingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeNameContext functionTypeName() {
			return GetRuleContext<FunctionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 470;
				elementaryTypeName();
				}
				break;
			case 2:
				{
				State = 471;
				userDefinedTypeName();
				}
				break;
			case 3:
				{
				State = 472;
				mapping();
				}
				break;
			case 4:
				{
				State = 473;
				functionTypeName();
				}
				break;
			case 5:
				{
				State = 474;
				Match(T__33);
				State = 475;
				Match(PayableKeyword);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 478;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 479;
					Match(T__31);
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
						{
						State = 480;
						expression(0);
						}
					}

					State = 483;
					Match(T__32);
					}
					} 
				}
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserDefinedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UserDefinedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUserDefinedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUserDefinedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedTypeNameContext userDefinedTypeName() {
		UserDefinedTypeNameContext _localctx = new UserDefinedTypeNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_userDefinedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			identifier();
			State = 494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 490;
					Match(T__34);
					State = 491;
					identifier();
					}
					} 
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MappingContext mapping() {
		MappingContext _localctx = new MappingContext(Context, State);
		EnterRule(_localctx, 68, RULE_mapping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(T__35);
			State = 498;
			Match(T__20);
			State = 499;
			elementaryTypeName();
			State = 500;
			Match(T__36);
			State = 501;
			typeName(0);
			State = 502;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterListContext[] functionTypeParameterList() {
			return GetRuleContexts<FunctionTypeParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterListContext functionTypeParameterList(int i) {
			return GetRuleContext<FunctionTypeParameterListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		public FunctionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeNameContext functionTypeName() {
		FunctionTypeNameContext _localctx = new FunctionTypeNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_functionTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(T__27);
			State = 505;
			functionTypeParameterList();
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 509;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case InternalKeyword:
						{
						State = 506;
						Match(InternalKeyword);
						}
						break;
					case ExternalKeyword:
						{
						State = 507;
						Match(ExternalKeyword);
						}
						break;
					case ConstantKeyword:
					case PayableKeyword:
					case PureKeyword:
					case ViewKeyword:
						{
						State = 508;
						stateMutability();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 514;
				Match(T__28);
				State = 515;
				functionTypeParameterList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageLocationContext : ParserRuleContext {
		public StorageLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStorageLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStorageLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageLocationContext storageLocation() {
		StorageLocationContext _localctx = new StorageLocationContext(Context, State);
		EnterRule(_localctx, 72, RULE_storageLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateMutabilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PureKeyword() { return GetToken(SolidityParser.PureKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword() { return GetToken(SolidityParser.ConstantKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ViewKeyword() { return GetToken(SolidityParser.ViewKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public StateMutabilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateMutability; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateMutability(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateMutability(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateMutability(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateMutabilityContext stateMutability() {
		StateMutabilityContext _localctx = new StateMutabilityContext(Context, State);
		EnterRule(_localctx, 74, RULE_stateMutability);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			_la = TokenStream.LA(1);
			if ( !((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 1313L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(T__13);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305837602137202704L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109094367L) != 0) {
				{
				{
				State = 523;
				statement();
				}
				}
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 529;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAssemblyStatementContext inlineAssemblyStatement() {
			return GetRuleContext<InlineAssemblyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmitStatementContext emitStatement() {
			return GetRuleContext<EmitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_statement);
		try {
			State = 543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531;
				ifStatement();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532;
				whileStatement();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 533;
				forStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 534;
				block();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 5);
				{
				State = 535;
				inlineAssemblyStatement();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 6);
				{
				State = 536;
				doWhileStatement();
				}
				break;
			case ContinueKeyword:
				EnterOuterAlt(_localctx, 7);
				{
				State = 537;
				continueStatement();
				}
				break;
			case BreakKeyword:
				EnterOuterAlt(_localctx, 8);
				{
				State = 538;
				breakStatement();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 9);
				{
				State = 539;
				returnStatement();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 10);
				{
				State = 540;
				throwStatement();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 11);
				{
				State = 541;
				emitStatement();
				}
				break;
			case T__3:
			case T__12:
			case T__20:
			case T__27:
			case T__31:
			case T__33:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 12);
				{
				State = 542;
				simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			expression(0);
			State = 546;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(T__40);
			State = 549;
			Match(T__20);
			State = 550;
			expression(0);
			State = 551;
			Match(T__21);
			State = 552;
			statement();
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 553;
				Match(T__41);
				State = 554;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(T__42);
			State = 558;
			Match(T__20);
			State = 559;
			expression(0);
			State = 560;
			Match(T__21);
			State = 561;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 563;
				variableDeclarationStatement();
				}
				break;
			case 2:
				{
				State = 564;
				expressionStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(T__23);
			State = 568;
			Match(T__20);
			State = 571;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__20:
			case T__27:
			case T__31:
			case T__33:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				{
				State = 569;
				simpleStatement();
				}
				break;
			case T__1:
				{
				State = 570;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 575;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__20:
			case T__31:
			case T__33:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				{
				State = 573;
				expressionStatement();
				}
				break;
			case T__1:
				{
				State = 574;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
				{
				State = 577;
				expression(0);
				}
			}

			State = 580;
			Match(T__21);
			State = 581;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAssemblyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		public InlineAssemblyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAssemblyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInlineAssemblyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInlineAssemblyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineAssemblyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineAssemblyStatementContext inlineAssemblyStatement() {
		InlineAssemblyStatementContext _localctx = new InlineAssemblyStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_inlineAssemblyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(T__43);
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringLiteral) {
				{
				State = 584;
				Match(StringLiteral);
				}
			}

			State = 587;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(T__44);
			State = 590;
			statement();
			State = 591;
			Match(T__42);
			State = 592;
			Match(T__20);
			State = 593;
			expression(0);
			State = 594;
			Match(T__21);
			State = 595;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			Match(ContinueKeyword);
			State = 598;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(BreakKeyword);
			State = 601;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(T__45);
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
				{
				State = 604;
				expression(0);
				}
			}

			State = 607;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(T__46);
			State = 610;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public EmitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEmitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEmitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmitStatementContext emitStatement() {
		EmitStatementContext _localctx = new EmitStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_emitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(T__47);
			State = 613;
			functionCall();
			State = 614;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 616;
				Match(T__48);
				State = 617;
				identifierList();
				}
				break;
			case 2:
				{
				State = 618;
				variableDeclaration();
				}
				break;
			case 3:
				{
				State = 619;
				Match(T__20);
				State = 620;
				variableDeclarationList();
				State = 621;
				Match(T__21);
				}
				break;
			}
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 625;
				Match(T__8);
				State = 626;
				expression(0);
				}
			}

			State = 629;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445434980737024L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 33554463L) != 0) {
				{
				State = 631;
				variableDeclaration();
				}
			}

			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 634;
				Match(T__14);
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8445434980737024L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 33554463L) != 0) {
					{
					State = 635;
					variableDeclaration();
					}
				}

				}
				}
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 108, RULE_identifierList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			Match(T__20);
			State = 650;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__12 || _la==T__39 || _la==Identifier) {
						{
						State = 644;
						identifier();
						}
					}

					State = 647;
					Match(T__14);
					}
					} 
				}
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 653;
				identifier();
				}
			}

			State = 656;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(SolidityParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uint() { return GetToken(SolidityParser.Uint, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byte() { return GetToken(SolidityParser.Byte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fixed() { return GetToken(SolidityParser.Fixed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ufixed() { return GetToken(SolidityParser.Ufixed, 0); }
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterElementaryTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitElementaryTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_elementaryTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			_la = TokenStream.LA(1);
			if ( !((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & -576460752302931967L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 661;
				Match(T__54);
				State = 662;
				typeName(0);
				}
				break;
			case 2:
				{
				State = 663;
				Match(T__20);
				State = 664;
				expression(0);
				State = 665;
				Match(T__21);
				}
				break;
			case 3:
				{
				State = 667;
				_la = TokenStream.LA(1);
				if ( !(_la==T__52 || _la==T__53) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 668;
				expression(19);
				}
				break;
			case 4:
				{
				State = 669;
				_la = TokenStream.LA(1);
				if ( !(_la==T__55 || _la==T__56) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 670;
				expression(18);
				}
				break;
			case 5:
				{
				State = 671;
				_la = TokenStream.LA(1);
				if ( !(_la==T__57 || _la==T__58) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 672;
				expression(17);
				}
				break;
			case 6:
				{
				State = 673;
				Match(T__59);
				State = 674;
				expression(16);
				}
				break;
			case 7:
				{
				State = 675;
				Match(T__3);
				State = 676;
				expression(15);
				}
				break;
			case 8:
				{
				State = 677;
				primaryExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 739;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 737;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 680;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 681;
						Match(T__60);
						State = 682;
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 683;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 684;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018427383808L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 685;
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 686;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 687;
						_la = TokenStream.LA(1);
						if ( !(_la==T__55 || _la==T__56) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 688;
						expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 689;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 690;
						_la = TokenStream.LA(1);
						if ( !(_la==T__63 || _la==T__64) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 691;
						expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 692;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 693;
						Match(T__65);
						State = 694;
						expression(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 695;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 696;
						Match(T__2);
						State = 697;
						expression(10);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 698;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 699;
						Match(T__66);
						State = 700;
						expression(9);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 701;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 702;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 703;
						expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 704;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 705;
						_la = TokenStream.LA(1);
						if ( !(_la==T__67 || _la==T__68) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 706;
						expression(7);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 707;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 708;
						Match(T__69);
						State = 709;
						expression(6);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 710;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 711;
						Match(T__70);
						State = 712;
						expression(5);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 713;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 714;
						Match(T__71);
						State = 715;
						expression(0);
						State = 716;
						Match(T__72);
						State = 717;
						expression(4);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 719;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 720;
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || (((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1023L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 721;
						expression(3);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 722;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 723;
						_la = TokenStream.LA(1);
						if ( !(_la==T__52 || _la==T__53) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 725;
						Match(T__31);
						State = 726;
						expression(0);
						State = 727;
						Match(T__32);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 729;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 730;
						Match(T__20);
						State = 731;
						functionCallArguments();
						State = 732;
						Match(T__21);
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 734;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 735;
						Match(T__34);
						State = 736;
						identifier();
						}
						break;
					}
					} 
				}
				State = 741;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeKeyword() { return GetToken(SolidityParser.TypeKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameExpressionContext typeNameExpression() {
			return GetRuleContext<TypeNameExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_primaryExpression);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742;
				Match(BooleanLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743;
				numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744;
				Match(HexLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 745;
				Match(StringLiteral);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 746;
				identifier();
				State = 749;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 747;
					Match(T__31);
					State = 748;
					Match(T__32);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 751;
				Match(TypeKeyword);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 752;
				tupleExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 753;
				typeNameExpression();
				State = 756;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 754;
					Match(T__31);
					State = 755;
					Match(T__32);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 116, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			expression(0);
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 761;
				Match(T__14);
				State = 762;
				expression(0);
				}
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext[] nameValue() {
			return GetRuleContexts<NameValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext nameValue(int i) {
			return GetRuleContext<NameValueContext>(i);
		}
		public NameValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueListContext nameValueList() {
		NameValueListContext _localctx = new NameValueListContext(Context, State);
		EnterRule(_localctx, 118, RULE_nameValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			nameValue();
			State = 773;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 769;
					Match(T__14);
					State = 770;
					nameValue();
					}
					} 
				}
				State = 775;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 776;
				Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueContext nameValue() {
		NameValueContext _localctx = new NameValueContext(Context, State);
		EnterRule(_localctx, 120, RULE_nameValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			identifier();
			State = 780;
			Match(T__72);
			State = 781;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCallArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCallArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 122, RULE_functionCallArguments);
		int _la;
		try {
			State = 791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 783;
				Match(T__13);
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__12 || _la==T__39 || _la==Identifier) {
					{
					State = 784;
					nameValueList();
					}
				}

				State = 787;
				Match(T__15);
				}
				break;
			case T__3:
			case T__12:
			case T__20:
			case T__21:
			case T__31:
			case T__33:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
					{
					State = 788;
					expressionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 124, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			expression(0);
			State = 794;
			Match(T__20);
			State = 795;
			functionCallArguments();
			State = 796;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext[] assemblyItem() {
			return GetRuleContexts<AssemblyItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext assemblyItem(int i) {
			return GetRuleContext<AssemblyItemContext>(i);
		}
		public AssemblyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyBlockContext assemblyBlock() {
		AssemblyBlockContext _localctx = new AssemblyBlockContext(Context, State);
		EnterRule(_localctx, 126, RULE_assemblyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			Match(T__13);
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4594876559679488L) != 0 || (((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 51561299981L) != 0) {
				{
				{
				State = 799;
				assemblyItem();
				}
				}
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 805;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
			return GetRuleContext<AssemblyLocalDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyAssignmentContext assemblyAssignment() {
			return GetRuleContext<AssemblyAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyStackAssignmentContext assemblyStackAssignment() {
			return GetRuleContext<AssemblyStackAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefinitionContext labelDefinition() {
			return GetRuleContext<LabelDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblySwitchContext assemblySwitch() {
			return GetRuleContext<AssemblySwitchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
			return GetRuleContext<AssemblyFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyForContext assemblyFor() {
			return GetRuleContext<AssemblyForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIfContext assemblyIf() {
			return GetRuleContext<AssemblyIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubAssemblyContext subAssembly() {
			return GetRuleContext<SubAssemblyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		public AssemblyItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyItemContext assemblyItem() {
		AssemblyItemContext _localctx = new AssemblyItemContext(Context, State);
		EnterRule(_localctx, 128, RULE_assemblyItem);
		try {
			State = 824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 808;
				assemblyBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 809;
				assemblyExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 810;
				assemblyLocalDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 811;
				assemblyAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 812;
				assemblyStackAssignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 813;
				labelDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 814;
				assemblySwitch();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 815;
				assemblyFunctionDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 816;
				assemblyFor();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 817;
				assemblyIf();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 818;
				Match(BreakKeyword);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 819;
				Match(ContinueKeyword);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 820;
				subAssembly();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 821;
				numberLiteral();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 822;
				Match(StringLiteral);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 823;
				Match(HexLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		public AssemblyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyExpressionContext assemblyExpression() {
		AssemblyExpressionContext _localctx = new AssemblyExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_assemblyExpression);
		try {
			State = 828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__33:
			case T__39:
			case T__45:
			case T__51:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826;
				assemblyCall();
				}
				break;
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827;
				assemblyLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 132, RULE_assemblyCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__45:
				{
				State = 830;
				Match(T__45);
				}
				break;
			case T__33:
				{
				State = 831;
				Match(T__33);
				}
				break;
			case T__51:
				{
				State = 832;
				Match(T__51);
				}
				break;
			case T__12:
			case T__39:
			case Identifier:
				{
				State = 833;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 836;
				Match(T__20);
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4575085063053312L) != 0 || (((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 786443L) != 0) {
					{
					State = 837;
					assemblyExpression();
					}
				}

				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 840;
					Match(T__14);
					State = 841;
					assemblyExpression();
					}
					}
					State = 846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 847;
				Match(T__21);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLocalDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLocalDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLocalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLocalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLocalDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
		AssemblyLocalDefinitionContext _localctx = new AssemblyLocalDefinitionContext(Context, State);
		EnterRule(_localctx, 134, RULE_assemblyLocalDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			Match(T__83);
			State = 851;
			assemblyIdentifierOrList();
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__84) {
				{
				State = 852;
				Match(T__84);
				State = 853;
				assemblyExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyAssignmentContext assemblyAssignment() {
		AssemblyAssignmentContext _localctx = new AssemblyAssignmentContext(Context, State);
		EnterRule(_localctx, 136, RULE_assemblyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			assemblyIdentifierOrList();
			State = 857;
			Match(T__84);
			State = 858;
			assemblyExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierOrListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyIdentifierOrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierOrList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierOrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierOrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIdentifierOrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
		AssemblyIdentifierOrListContext _localctx = new AssemblyIdentifierOrListContext(Context, State);
		EnterRule(_localctx, 138, RULE_assemblyIdentifierOrList);
		try {
			State = 865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__39:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 860;
				identifier();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 861;
				Match(T__20);
				State = 862;
				assemblyIdentifierList();
				State = 863;
				Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AssemblyIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierListContext assemblyIdentifierList() {
		AssemblyIdentifierListContext _localctx = new AssemblyIdentifierListContext(Context, State);
		EnterRule(_localctx, 140, RULE_assemblyIdentifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			identifier();
			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 868;
				Match(T__14);
				State = 869;
				identifier();
				}
				}
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyStackAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyStackAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyStackAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyStackAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyStackAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyStackAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyStackAssignmentContext assemblyStackAssignment() {
		AssemblyStackAssignmentContext _localctx = new AssemblyStackAssignmentContext(Context, State);
		EnterRule(_localctx, 142, RULE_assemblyStackAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			Match(T__85);
			State = 876;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefinitionContext labelDefinition() {
		LabelDefinitionContext _localctx = new LabelDefinitionContext(Context, State);
		EnterRule(_localctx, 144, RULE_labelDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			identifier();
			State = 879;
			Match(T__72);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblySwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext[] assemblyCase() {
			return GetRuleContexts<AssemblyCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext assemblyCase(int i) {
			return GetRuleContext<AssemblyCaseContext>(i);
		}
		public AssemblySwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblySwitch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblySwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblySwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblySwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblySwitchContext assemblySwitch() {
		AssemblySwitchContext _localctx = new AssemblySwitchContext(Context, State);
		EnterRule(_localctx, 146, RULE_assemblySwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(T__86);
			State = 882;
			assemblyExpression();
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__87 || _la==T__88) {
				{
				{
				State = 883;
				assemblyCase();
				}
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCaseContext assemblyCase() {
		AssemblyCaseContext _localctx = new AssemblyCaseContext(Context, State);
		EnterRule(_localctx, 148, RULE_assemblyCase);
		try {
			State = 895;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__87:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				Match(T__87);
				State = 890;
				assemblyLiteral();
				State = 891;
				assemblyBlock();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 893;
				Match(T__88);
				State = 894;
				assemblyBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
			return GetRuleContext<AssemblyFunctionReturnsContext>(0);
		}
		public AssemblyFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
		AssemblyFunctionDefinitionContext _localctx = new AssemblyFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 150, RULE_assemblyFunctionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(T__27);
			State = 898;
			identifier();
			State = 899;
			Match(T__20);
			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 900;
				assemblyIdentifierList();
				}
			}

			State = 903;
			Match(T__21);
			State = 905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__89) {
				{
				State = 904;
				assemblyFunctionReturns();
				}
			}

			State = 907;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionReturnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyFunctionReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionReturns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
		AssemblyFunctionReturnsContext _localctx = new AssemblyFunctionReturnsContext(Context, State);
		EnterRule(_localctx, 152, RULE_assemblyFunctionReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 909;
			Match(T__89);
			State = 910;
			assemblyIdentifierList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext[] assemblyBlock() {
			return GetRuleContexts<AssemblyBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock(int i) {
			return GetRuleContext<AssemblyBlockContext>(i);
		}
		public AssemblyForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyForContext assemblyFor() {
		AssemblyForContext _localctx = new AssemblyForContext(Context, State);
		EnterRule(_localctx, 154, RULE_assemblyFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			Match(T__23);
			State = 915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 913;
				assemblyBlock();
				}
				break;
			case T__12:
			case T__33:
			case T__39:
			case T__45:
			case T__51:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case Identifier:
			case StringLiteral:
				{
				State = 914;
				assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 917;
			assemblyExpression();
			State = 920;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 918;
				assemblyBlock();
				}
				break;
			case T__12:
			case T__33:
			case T__39:
			case T__45:
			case T__51:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case Identifier:
			case StringLiteral:
				{
				State = 919;
				assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 922;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIfContext assemblyIf() {
		AssemblyIfContext _localctx = new AssemblyIfContext(Context, State);
		EnterRule(_localctx, 156, RULE_assemblyIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(T__40);
			State = 925;
			assemblyExpression();
			State = 926;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		public AssemblyLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLiteralContext assemblyLiteral() {
		AssemblyLiteralContext _localctx = new AssemblyLiteralContext(Context, State);
		EnterRule(_localctx, 158, RULE_assemblyLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			_la = TokenStream.LA(1);
			if ( !((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 524299L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubAssemblyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public SubAssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subAssembly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSubAssembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSubAssembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubAssemblyContext subAssembly() {
		SubAssemblyContext _localctx = new SubAssemblyContext(Context, State);
		EnterRule(_localctx, 160, RULE_subAssembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(T__43);
			State = 931;
			identifier();
			State = 932;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_tupleExpression);
		int _la;
		try {
			State = 960;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 934;
				Match(T__20);
				{
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
					{
					State = 935;
					expression(0);
					}
				}

				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 938;
					Match(T__14);
					State = 940;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
						{
						State = 939;
						expression(0);
						}
					}

					}
					}
					State = 946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 947;
				Match(T__21);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 948;
				Match(T__31);
				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305281180248842256L) != 0 || (((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 109053407L) != 0) {
					{
					State = 949;
					expression(0);
					State = 954;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__14) {
						{
						{
						State = 950;
						Match(T__14);
						State = 951;
						expression(0);
						}
						}
						State = 956;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 959;
				Match(T__32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public TypeNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameExpressionContext typeNameExpression() {
		TypeNameExpressionContext _localctx = new TypeNameExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_typeNameExpression);
		try {
			State = 964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
				EnterOuterAlt(_localctx, 1);
				{
				State = 962;
				elementaryTypeName();
				}
				break;
			case T__12:
			case T__39:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 963;
				userDefinedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberUnit() { return GetToken(SolidityParser.NumberUnit, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			_la = TokenStream.LA(1);
			if ( !(_la==DecimalNumber || _la==HexNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 967;
				Match(NumberUnit);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SolidityParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__39 || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 56: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 25);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,122,973,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		1,0,1,0,1,0,5,0,174,8,0,10,0,12,0,177,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,2,1,2,1,3,1,3,3,3,190,8,3,1,4,1,4,3,4,194,8,4,1,5,1,5,1,6,3,6,199,8,
		6,1,6,1,6,1,7,1,7,1,7,3,7,206,8,7,1,8,1,8,1,8,1,8,3,8,212,8,8,1,8,1,8,
		1,8,1,8,3,8,218,8,8,1,8,1,8,3,8,222,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,5,8,232,8,8,10,8,12,8,235,9,8,1,8,1,8,1,8,1,8,1,8,3,8,242,8,8,1,9,1,
		9,1,10,3,10,247,8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,255,8,10,10,10,
		12,10,258,9,10,3,10,260,8,10,1,10,1,10,5,10,264,8,10,10,10,12,10,267,9,
		10,1,10,1,10,1,11,1,11,1,11,3,11,274,8,11,1,11,3,11,277,8,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,3,12,287,8,12,1,13,1,13,5,13,291,8,13,10,
		13,12,13,294,9,13,1,13,1,13,1,13,3,13,299,8,13,1,13,1,13,1,14,1,14,1,14,
		1,14,1,14,3,14,308,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,5,15,320,8,15,10,15,12,15,323,9,15,3,15,325,8,15,1,15,1,15,1,16,1,16,
		1,16,1,16,1,16,1,17,1,17,1,17,3,17,337,8,17,1,17,1,17,1,18,1,18,1,18,3,
		18,344,8,18,1,18,3,18,347,8,18,1,19,3,19,350,8,19,1,19,1,19,3,19,354,8,
		19,1,19,1,19,1,19,3,19,359,8,19,1,19,1,19,3,19,363,8,19,1,20,1,20,1,20,
		1,21,1,21,1,21,1,21,1,21,1,21,5,21,374,8,21,10,21,12,21,377,9,21,1,22,
		3,22,380,8,22,1,22,1,22,1,22,1,22,3,22,386,8,22,1,22,1,22,1,23,1,23,1,
		24,1,24,1,24,1,24,3,24,396,8,24,1,24,1,24,5,24,400,8,24,10,24,12,24,403,
		9,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,411,8,25,10,25,12,25,414,9,25,
		3,25,416,8,25,1,25,1,25,1,26,1,26,3,26,422,8,26,1,26,3,26,425,8,26,1,27,
		1,27,1,27,1,27,5,27,431,8,27,10,27,12,27,434,9,27,3,27,436,8,27,1,27,1,
		27,1,28,1,28,3,28,442,8,28,1,28,3,28,445,8,28,1,29,1,29,1,29,1,29,5,29,
		451,8,29,10,29,12,29,454,9,29,3,29,456,8,29,1,29,1,29,1,30,1,30,3,30,462,
		8,30,1,31,1,31,3,31,466,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,3,32,477,8,32,1,32,1,32,1,32,3,32,482,8,32,1,32,5,32,485,8,32,10,32,
		12,32,488,9,32,1,33,1,33,1,33,5,33,493,8,33,10,33,12,33,496,9,33,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,5,35,510,8,35,10,
		35,12,35,513,9,35,1,35,1,35,3,35,517,8,35,1,36,1,36,1,37,1,37,1,38,1,38,
		5,38,525,8,38,10,38,12,38,528,9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
		1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,544,8,39,1,40,1,40,1,40,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,3,41,556,8,41,1,42,1,42,1,42,1,42,1,42,1,42,
		1,43,1,43,3,43,566,8,43,1,44,1,44,1,44,1,44,3,44,572,8,44,1,44,1,44,3,
		44,576,8,44,1,44,3,44,579,8,44,1,44,1,44,1,44,1,45,1,45,3,45,586,8,45,
		1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,
		1,48,1,48,1,49,1,49,3,49,606,8,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,
		51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,624,8,52,1,52,1,52,3,52,
		628,8,52,1,52,1,52,1,53,3,53,633,8,53,1,53,1,53,3,53,637,8,53,5,53,639,
		8,53,10,53,12,53,642,9,53,1,54,1,54,3,54,646,8,54,1,54,5,54,649,8,54,10,
		54,12,54,652,9,54,1,54,3,54,655,8,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,3,56,679,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,5,56,738,8,56,10,56,12,56,741,9,56,1,57,1,57,1,
		57,1,57,1,57,1,57,1,57,3,57,750,8,57,1,57,1,57,1,57,1,57,1,57,3,57,757,
		8,57,3,57,759,8,57,1,58,1,58,1,58,5,58,764,8,58,10,58,12,58,767,9,58,1,
		59,1,59,1,59,5,59,772,8,59,10,59,12,59,775,9,59,1,59,3,59,778,8,59,1,60,
		1,60,1,60,1,60,1,61,1,61,3,61,786,8,61,1,61,1,61,3,61,790,8,61,3,61,792,
		8,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,5,63,801,8,63,10,63,12,63,804,
		9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,3,64,825,8,64,1,65,1,65,3,65,829,8,65,1,
		66,1,66,1,66,1,66,3,66,835,8,66,1,66,1,66,3,66,839,8,66,1,66,1,66,5,66,
		843,8,66,10,66,12,66,846,9,66,1,66,3,66,849,8,66,1,67,1,67,1,67,1,67,3,
		67,855,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,3,69,866,8,69,
		1,70,1,70,1,70,5,70,871,8,70,10,70,12,70,874,9,70,1,71,1,71,1,71,1,72,
		1,72,1,72,1,73,1,73,1,73,5,73,885,8,73,10,73,12,73,888,9,73,1,74,1,74,
		1,74,1,74,1,74,1,74,3,74,896,8,74,1,75,1,75,1,75,1,75,3,75,902,8,75,1,
		75,1,75,3,75,906,8,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,3,77,916,
		8,77,1,77,1,77,1,77,3,77,921,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,
		79,1,80,1,80,1,80,1,80,1,81,1,81,3,81,937,8,81,1,81,1,81,3,81,941,8,81,
		5,81,943,8,81,10,81,12,81,946,9,81,1,81,1,81,1,81,1,81,1,81,5,81,953,8,
		81,10,81,12,81,956,9,81,3,81,958,8,81,1,81,3,81,961,8,81,1,82,1,82,3,82,
		965,8,82,1,83,1,83,3,83,969,8,83,1,84,1,84,1,84,0,2,64,112,85,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,0,18,1,
		0,3,9,1,0,91,92,1,0,17,19,3,0,107,107,111,111,113,114,1,0,38,40,4,0,107,
		107,112,112,115,115,117,117,3,0,34,34,49,52,93,97,1,0,53,54,1,0,56,57,
		1,0,58,59,2,0,12,12,62,63,1,0,64,65,1,0,5,8,1,0,68,69,2,0,9,9,74,83,3,
		0,100,101,103,103,119,119,1,0,100,101,3,0,13,13,40,40,118,118,1066,0,175,
		1,0,0,0,2,180,1,0,0,0,4,185,1,0,0,0,6,189,1,0,0,0,8,191,1,0,0,0,10,195,
		1,0,0,0,12,198,1,0,0,0,14,202,1,0,0,0,16,241,1,0,0,0,18,243,1,0,0,0,20,
		246,1,0,0,0,22,270,1,0,0,0,24,286,1,0,0,0,26,288,1,0,0,0,28,302,1,0,0,
		0,30,311,1,0,0,0,32,328,1,0,0,0,34,333,1,0,0,0,36,340,1,0,0,0,38,349,1,
		0,0,0,40,364,1,0,0,0,42,375,1,0,0,0,44,379,1,0,0,0,46,389,1,0,0,0,48,391,
		1,0,0,0,50,406,1,0,0,0,52,419,1,0,0,0,54,426,1,0,0,0,56,439,1,0,0,0,58,
		446,1,0,0,0,60,459,1,0,0,0,62,463,1,0,0,0,64,476,1,0,0,0,66,489,1,0,0,
		0,68,497,1,0,0,0,70,504,1,0,0,0,72,518,1,0,0,0,74,520,1,0,0,0,76,522,1,
		0,0,0,78,543,1,0,0,0,80,545,1,0,0,0,82,548,1,0,0,0,84,557,1,0,0,0,86,565,
		1,0,0,0,88,567,1,0,0,0,90,583,1,0,0,0,92,589,1,0,0,0,94,597,1,0,0,0,96,
		600,1,0,0,0,98,603,1,0,0,0,100,609,1,0,0,0,102,612,1,0,0,0,104,623,1,0,
		0,0,106,632,1,0,0,0,108,643,1,0,0,0,110,658,1,0,0,0,112,678,1,0,0,0,114,
		758,1,0,0,0,116,760,1,0,0,0,118,768,1,0,0,0,120,779,1,0,0,0,122,791,1,
		0,0,0,124,793,1,0,0,0,126,798,1,0,0,0,128,824,1,0,0,0,130,828,1,0,0,0,
		132,834,1,0,0,0,134,850,1,0,0,0,136,856,1,0,0,0,138,865,1,0,0,0,140,867,
		1,0,0,0,142,875,1,0,0,0,144,878,1,0,0,0,146,881,1,0,0,0,148,895,1,0,0,
		0,150,897,1,0,0,0,152,909,1,0,0,0,154,912,1,0,0,0,156,924,1,0,0,0,158,
		928,1,0,0,0,160,930,1,0,0,0,162,960,1,0,0,0,164,964,1,0,0,0,166,966,1,
		0,0,0,168,970,1,0,0,0,170,174,3,2,1,0,171,174,3,16,8,0,172,174,3,20,10,
		0,173,170,1,0,0,0,173,171,1,0,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,
		173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,179,5,
		0,0,1,179,1,1,0,0,0,180,181,5,1,0,0,181,182,3,4,2,0,182,183,3,6,3,0,183,
		184,5,2,0,0,184,3,1,0,0,0,185,186,3,168,84,0,186,5,1,0,0,0,187,190,3,8,
		4,0,188,190,3,112,56,0,189,187,1,0,0,0,189,188,1,0,0,0,190,7,1,0,0,0,191,
		193,3,12,6,0,192,194,3,12,6,0,193,192,1,0,0,0,193,194,1,0,0,0,194,9,1,
		0,0,0,195,196,7,0,0,0,196,11,1,0,0,0,197,199,3,10,5,0,198,197,1,0,0,0,
		198,199,1,0,0,0,199,200,1,0,0,0,200,201,5,98,0,0,201,13,1,0,0,0,202,205,
		3,168,84,0,203,204,5,10,0,0,204,206,3,168,84,0,205,203,1,0,0,0,205,206,
		1,0,0,0,206,15,1,0,0,0,207,208,5,11,0,0,208,211,5,119,0,0,209,210,5,10,
		0,0,210,212,3,168,84,0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,
		213,242,5,2,0,0,214,217,5,11,0,0,215,218,5,12,0,0,216,218,3,168,84,0,217,
		215,1,0,0,0,217,216,1,0,0,0,218,221,1,0,0,0,219,220,5,10,0,0,220,222,3,
		168,84,0,221,219,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,13,
		0,0,224,225,5,119,0,0,225,242,5,2,0,0,226,227,5,11,0,0,227,228,5,14,0,
		0,228,233,3,14,7,0,229,230,5,15,0,0,230,232,3,14,7,0,231,229,1,0,0,0,232,
		235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,
		0,0,0,236,237,5,16,0,0,237,238,5,13,0,0,238,239,5,119,0,0,239,240,5,2,
		0,0,240,242,1,0,0,0,241,207,1,0,0,0,241,214,1,0,0,0,241,226,1,0,0,0,242,
		17,1,0,0,0,243,244,7,1,0,0,244,19,1,0,0,0,245,247,3,18,9,0,246,245,1,0,
		0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,7,2,0,0,249,259,3,168,84,0,
		250,251,5,20,0,0,251,256,3,22,11,0,252,253,5,15,0,0,253,255,3,22,11,0,
		254,252,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,260,
		1,0,0,0,258,256,1,0,0,0,259,250,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,
		0,261,265,5,14,0,0,262,264,3,24,12,0,263,262,1,0,0,0,264,267,1,0,0,0,265,
		263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,
		16,0,0,269,21,1,0,0,0,270,276,3,66,33,0,271,273,5,21,0,0,272,274,3,116,
		58,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,277,5,22,0,0,
		276,271,1,0,0,0,276,277,1,0,0,0,277,23,1,0,0,0,278,287,3,26,13,0,279,287,
		3,28,14,0,280,287,3,30,15,0,281,287,3,32,16,0,282,287,3,34,17,0,283,287,
		3,38,19,0,284,287,3,44,22,0,285,287,3,48,24,0,286,278,1,0,0,0,286,279,
		1,0,0,0,286,280,1,0,0,0,286,281,1,0,0,0,286,282,1,0,0,0,286,283,1,0,0,
		0,286,284,1,0,0,0,286,285,1,0,0,0,287,25,1,0,0,0,288,292,3,64,32,0,289,
		291,7,3,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,
		0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,298,3,168,84,0,296,297,5,9,0,
		0,297,299,3,112,56,0,298,296,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,
		301,5,2,0,0,301,27,1,0,0,0,302,303,5,23,0,0,303,304,3,168,84,0,304,307,
		5,24,0,0,305,308,5,12,0,0,306,308,3,64,32,0,307,305,1,0,0,0,307,306,1,
		0,0,0,308,309,1,0,0,0,309,310,5,2,0,0,310,29,1,0,0,0,311,312,5,25,0,0,
		312,313,3,168,84,0,313,324,5,14,0,0,314,315,3,62,31,0,315,321,5,2,0,0,
		316,317,3,62,31,0,317,318,5,2,0,0,318,320,1,0,0,0,319,316,1,0,0,0,320,
		323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,325,1,0,0,0,323,321,1,
		0,0,0,324,314,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,327,5,16,0,0,
		327,31,1,0,0,0,328,329,5,26,0,0,329,330,3,50,25,0,330,331,3,42,21,0,331,
		332,3,76,38,0,332,33,1,0,0,0,333,334,5,27,0,0,334,336,3,168,84,0,335,337,
		3,50,25,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,3,76,
		38,0,339,35,1,0,0,0,340,346,3,168,84,0,341,343,5,21,0,0,342,344,3,116,
		58,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,347,5,22,0,0,
		346,341,1,0,0,0,346,347,1,0,0,0,347,37,1,0,0,0,348,350,3,18,9,0,349,348,
		1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,353,5,28,0,0,352,354,3,168,
		84,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,3,50,25,0,
		356,358,3,42,21,0,357,359,3,40,20,0,358,357,1,0,0,0,358,359,1,0,0,0,359,
		362,1,0,0,0,360,363,5,2,0,0,361,363,3,76,38,0,362,360,1,0,0,0,362,361,
		1,0,0,0,363,39,1,0,0,0,364,365,5,29,0,0,365,366,3,50,25,0,366,41,1,0,0,
		0,367,374,3,36,18,0,368,374,3,74,37,0,369,374,5,109,0,0,370,374,5,114,
		0,0,371,374,5,111,0,0,372,374,5,113,0,0,373,367,1,0,0,0,373,368,1,0,0,
		0,373,369,1,0,0,0,373,370,1,0,0,0,373,371,1,0,0,0,373,372,1,0,0,0,374,
		377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,43,1,0,0,0,377,375,1,0,
		0,0,378,380,3,18,9,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,
		382,5,30,0,0,382,383,3,168,84,0,383,385,3,54,27,0,384,386,5,105,0,0,385,
		384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,5,2,0,0,388,45,1,0,
		0,0,389,390,3,168,84,0,390,47,1,0,0,0,391,392,5,31,0,0,392,393,3,168,84,
		0,393,395,5,14,0,0,394,396,3,46,23,0,395,394,1,0,0,0,395,396,1,0,0,0,396,
		401,1,0,0,0,397,398,5,15,0,0,398,400,3,46,23,0,399,397,1,0,0,0,400,403,
		1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,
		0,404,405,5,16,0,0,405,49,1,0,0,0,406,415,5,21,0,0,407,412,3,52,26,0,408,
		409,5,15,0,0,409,411,3,52,26,0,410,408,1,0,0,0,411,414,1,0,0,0,412,410,
		1,0,0,0,412,413,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,415,407,1,0,0,
		0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,22,0,0,418,51,1,0,0,0,419,
		421,3,64,32,0,420,422,3,72,36,0,421,420,1,0,0,0,421,422,1,0,0,0,422,424,
		1,0,0,0,423,425,3,168,84,0,424,423,1,0,0,0,424,425,1,0,0,0,425,53,1,0,
		0,0,426,435,5,21,0,0,427,432,3,56,28,0,428,429,5,15,0,0,429,431,3,56,28,
		0,430,428,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,
		436,1,0,0,0,434,432,1,0,0,0,435,427,1,0,0,0,435,436,1,0,0,0,436,437,1,
		0,0,0,437,438,5,22,0,0,438,55,1,0,0,0,439,441,3,64,32,0,440,442,5,110,
		0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,445,3,168,84,0,
		444,443,1,0,0,0,444,445,1,0,0,0,445,57,1,0,0,0,446,455,5,21,0,0,447,452,
		3,60,30,0,448,449,5,15,0,0,449,451,3,60,30,0,450,448,1,0,0,0,451,454,1,
		0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,
		455,447,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,5,22,0,0,458,59,
		1,0,0,0,459,461,3,64,32,0,460,462,3,72,36,0,461,460,1,0,0,0,461,462,1,
		0,0,0,462,61,1,0,0,0,463,465,3,64,32,0,464,466,3,72,36,0,465,464,1,0,0,
		0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,3,168,84,0,468,63,1,0,0,0,469,
		470,6,32,-1,0,470,477,3,110,55,0,471,477,3,66,33,0,472,477,3,68,34,0,473,
		477,3,70,35,0,474,475,5,34,0,0,475,477,5,112,0,0,476,469,1,0,0,0,476,471,
		1,0,0,0,476,472,1,0,0,0,476,473,1,0,0,0,476,474,1,0,0,0,477,486,1,0,0,
		0,478,479,10,3,0,0,479,481,5,32,0,0,480,482,3,112,56,0,481,480,1,0,0,0,
		481,482,1,0,0,0,482,483,1,0,0,0,483,485,5,33,0,0,484,478,1,0,0,0,485,488,
		1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,65,1,0,0,0,488,486,1,0,0,0,
		489,494,3,168,84,0,490,491,5,35,0,0,491,493,3,168,84,0,492,490,1,0,0,0,
		493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,67,1,0,0,0,496,494,
		1,0,0,0,497,498,5,36,0,0,498,499,5,21,0,0,499,500,3,110,55,0,500,501,5,
		37,0,0,501,502,3,64,32,0,502,503,5,22,0,0,503,69,1,0,0,0,504,505,5,28,
		0,0,505,511,3,58,29,0,506,510,5,111,0,0,507,510,5,109,0,0,508,510,3,74,
		37,0,509,506,1,0,0,0,509,507,1,0,0,0,509,508,1,0,0,0,510,513,1,0,0,0,511,
		509,1,0,0,0,511,512,1,0,0,0,512,516,1,0,0,0,513,511,1,0,0,0,514,515,5,
		29,0,0,515,517,3,58,29,0,516,514,1,0,0,0,516,517,1,0,0,0,517,71,1,0,0,
		0,518,519,7,4,0,0,519,73,1,0,0,0,520,521,7,5,0,0,521,75,1,0,0,0,522,526,
		5,14,0,0,523,525,3,78,39,0,524,523,1,0,0,0,525,528,1,0,0,0,526,524,1,0,
		0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,526,1,0,0,0,529,530,5,16,0,0,530,
		77,1,0,0,0,531,544,3,82,41,0,532,544,3,84,42,0,533,544,3,88,44,0,534,544,
		3,76,38,0,535,544,3,90,45,0,536,544,3,92,46,0,537,544,3,94,47,0,538,544,
		3,96,48,0,539,544,3,98,49,0,540,544,3,100,50,0,541,544,3,102,51,0,542,
		544,3,86,43,0,543,531,1,0,0,0,543,532,1,0,0,0,543,533,1,0,0,0,543,534,
		1,0,0,0,543,535,1,0,0,0,543,536,1,0,0,0,543,537,1,0,0,0,543,538,1,0,0,
		0,543,539,1,0,0,0,543,540,1,0,0,0,543,541,1,0,0,0,543,542,1,0,0,0,544,
		79,1,0,0,0,545,546,3,112,56,0,546,547,5,2,0,0,547,81,1,0,0,0,548,549,5,
		41,0,0,549,550,5,21,0,0,550,551,3,112,56,0,551,552,5,22,0,0,552,555,3,
		78,39,0,553,554,5,42,0,0,554,556,3,78,39,0,555,553,1,0,0,0,555,556,1,0,
		0,0,556,83,1,0,0,0,557,558,5,43,0,0,558,559,5,21,0,0,559,560,3,112,56,
		0,560,561,5,22,0,0,561,562,3,78,39,0,562,85,1,0,0,0,563,566,3,104,52,0,
		564,566,3,80,40,0,565,563,1,0,0,0,565,564,1,0,0,0,566,87,1,0,0,0,567,568,
		5,24,0,0,568,571,5,21,0,0,569,572,3,86,43,0,570,572,5,2,0,0,571,569,1,
		0,0,0,571,570,1,0,0,0,572,575,1,0,0,0,573,576,3,80,40,0,574,576,5,2,0,
		0,575,573,1,0,0,0,575,574,1,0,0,0,576,578,1,0,0,0,577,579,3,112,56,0,578,
		577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,5,22,0,0,581,582,3,
		78,39,0,582,89,1,0,0,0,583,585,5,44,0,0,584,586,5,119,0,0,585,584,1,0,
		0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,3,126,63,0,588,91,1,0,0,0,
		589,590,5,45,0,0,590,591,3,78,39,0,591,592,5,43,0,0,592,593,5,21,0,0,593,
		594,3,112,56,0,594,595,5,22,0,0,595,596,5,2,0,0,596,93,1,0,0,0,597,598,
		5,108,0,0,598,599,5,2,0,0,599,95,1,0,0,0,600,601,5,106,0,0,601,602,5,2,
		0,0,602,97,1,0,0,0,603,605,5,46,0,0,604,606,3,112,56,0,605,604,1,0,0,0,
		605,606,1,0,0,0,606,607,1,0,0,0,607,608,5,2,0,0,608,99,1,0,0,0,609,610,
		5,47,0,0,610,611,5,2,0,0,611,101,1,0,0,0,612,613,5,48,0,0,613,614,3,124,
		62,0,614,615,5,2,0,0,615,103,1,0,0,0,616,617,5,49,0,0,617,624,3,108,54,
		0,618,624,3,62,31,0,619,620,5,21,0,0,620,621,3,106,53,0,621,622,5,22,0,
		0,622,624,1,0,0,0,623,616,1,0,0,0,623,618,1,0,0,0,623,619,1,0,0,0,624,
		627,1,0,0,0,625,626,5,9,0,0,626,628,3,112,56,0,627,625,1,0,0,0,627,628,
		1,0,0,0,628,629,1,0,0,0,629,630,5,2,0,0,630,105,1,0,0,0,631,633,3,62,31,
		0,632,631,1,0,0,0,632,633,1,0,0,0,633,640,1,0,0,0,634,636,5,15,0,0,635,
		637,3,62,31,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,634,
		1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,107,1,0,0,
		0,642,640,1,0,0,0,643,650,5,21,0,0,644,646,3,168,84,0,645,644,1,0,0,0,
		645,646,1,0,0,0,646,647,1,0,0,0,647,649,5,15,0,0,648,645,1,0,0,0,649,652,
		1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,
		0,653,655,3,168,84,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,
		657,5,22,0,0,657,109,1,0,0,0,658,659,7,6,0,0,659,111,1,0,0,0,660,661,6,
		56,-1,0,661,662,5,55,0,0,662,679,3,64,32,0,663,664,5,21,0,0,664,665,3,
		112,56,0,665,666,5,22,0,0,666,679,1,0,0,0,667,668,7,7,0,0,668,679,3,112,
		56,19,669,670,7,8,0,0,670,679,3,112,56,18,671,672,7,9,0,0,672,679,3,112,
		56,17,673,674,5,60,0,0,674,679,3,112,56,16,675,676,5,4,0,0,676,679,3,112,
		56,15,677,679,3,114,57,0,678,660,1,0,0,0,678,663,1,0,0,0,678,667,1,0,0,
		0,678,669,1,0,0,0,678,671,1,0,0,0,678,673,1,0,0,0,678,675,1,0,0,0,678,
		677,1,0,0,0,679,739,1,0,0,0,680,681,10,14,0,0,681,682,5,61,0,0,682,738,
		3,112,56,15,683,684,10,13,0,0,684,685,7,10,0,0,685,738,3,112,56,14,686,
		687,10,12,0,0,687,688,7,8,0,0,688,738,3,112,56,13,689,690,10,11,0,0,690,
		691,7,11,0,0,691,738,3,112,56,12,692,693,10,10,0,0,693,694,5,66,0,0,694,
		738,3,112,56,11,695,696,10,9,0,0,696,697,5,3,0,0,697,738,3,112,56,10,698,
		699,10,8,0,0,699,700,5,67,0,0,700,738,3,112,56,9,701,702,10,7,0,0,702,
		703,7,12,0,0,703,738,3,112,56,8,704,705,10,6,0,0,705,706,7,13,0,0,706,
		738,3,112,56,7,707,708,10,5,0,0,708,709,5,70,0,0,709,738,3,112,56,6,710,
		711,10,4,0,0,711,712,5,71,0,0,712,738,3,112,56,5,713,714,10,3,0,0,714,
		715,5,72,0,0,715,716,3,112,56,0,716,717,5,73,0,0,717,718,3,112,56,4,718,
		738,1,0,0,0,719,720,10,2,0,0,720,721,7,14,0,0,721,738,3,112,56,3,722,723,
		10,25,0,0,723,738,7,7,0,0,724,725,10,23,0,0,725,726,5,32,0,0,726,727,3,
		112,56,0,727,728,5,33,0,0,728,738,1,0,0,0,729,730,10,22,0,0,730,731,5,
		21,0,0,731,732,3,122,61,0,732,733,5,22,0,0,733,738,1,0,0,0,734,735,10,
		21,0,0,735,736,5,35,0,0,736,738,3,168,84,0,737,680,1,0,0,0,737,683,1,0,
		0,0,737,686,1,0,0,0,737,689,1,0,0,0,737,692,1,0,0,0,737,695,1,0,0,0,737,
		698,1,0,0,0,737,701,1,0,0,0,737,704,1,0,0,0,737,707,1,0,0,0,737,710,1,
		0,0,0,737,713,1,0,0,0,737,719,1,0,0,0,737,722,1,0,0,0,737,724,1,0,0,0,
		737,729,1,0,0,0,737,734,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,
		1,0,0,0,740,113,1,0,0,0,741,739,1,0,0,0,742,759,5,99,0,0,743,759,3,166,
		83,0,744,759,5,103,0,0,745,759,5,119,0,0,746,749,3,168,84,0,747,748,5,
		32,0,0,748,750,5,33,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,759,1,0,0,
		0,751,759,5,116,0,0,752,759,3,162,81,0,753,756,3,164,82,0,754,755,5,32,
		0,0,755,757,5,33,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,759,1,0,0,0,758,
		742,1,0,0,0,758,743,1,0,0,0,758,744,1,0,0,0,758,745,1,0,0,0,758,746,1,
		0,0,0,758,751,1,0,0,0,758,752,1,0,0,0,758,753,1,0,0,0,759,115,1,0,0,0,
		760,765,3,112,56,0,761,762,5,15,0,0,762,764,3,112,56,0,763,761,1,0,0,0,
		764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,117,1,0,0,0,767,765,
		1,0,0,0,768,773,3,120,60,0,769,770,5,15,0,0,770,772,3,120,60,0,771,769,
		1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,777,1,0,0,
		0,775,773,1,0,0,0,776,778,5,15,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,
		119,1,0,0,0,779,780,3,168,84,0,780,781,5,73,0,0,781,782,3,112,56,0,782,
		121,1,0,0,0,783,785,5,14,0,0,784,786,3,118,59,0,785,784,1,0,0,0,785,786,
		1,0,0,0,786,787,1,0,0,0,787,792,5,16,0,0,788,790,3,116,58,0,789,788,1,
		0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,783,1,0,0,0,791,789,1,0,0,0,
		792,123,1,0,0,0,793,794,3,112,56,0,794,795,5,21,0,0,795,796,3,122,61,0,
		796,797,5,22,0,0,797,125,1,0,0,0,798,802,5,14,0,0,799,801,3,128,64,0,800,
		799,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,805,1,
		0,0,0,804,802,1,0,0,0,805,806,5,16,0,0,806,127,1,0,0,0,807,825,3,168,84,
		0,808,825,3,126,63,0,809,825,3,130,65,0,810,825,3,134,67,0,811,825,3,136,
		68,0,812,825,3,142,71,0,813,825,3,144,72,0,814,825,3,146,73,0,815,825,
		3,150,75,0,816,825,3,154,77,0,817,825,3,156,78,0,818,825,5,106,0,0,819,
		825,5,108,0,0,820,825,3,160,80,0,821,825,3,166,83,0,822,825,5,119,0,0,
		823,825,5,103,0,0,824,807,1,0,0,0,824,808,1,0,0,0,824,809,1,0,0,0,824,
		810,1,0,0,0,824,811,1,0,0,0,824,812,1,0,0,0,824,813,1,0,0,0,824,814,1,
		0,0,0,824,815,1,0,0,0,824,816,1,0,0,0,824,817,1,0,0,0,824,818,1,0,0,0,
		824,819,1,0,0,0,824,820,1,0,0,0,824,821,1,0,0,0,824,822,1,0,0,0,824,823,
		1,0,0,0,825,129,1,0,0,0,826,829,3,132,66,0,827,829,3,158,79,0,828,826,
		1,0,0,0,828,827,1,0,0,0,829,131,1,0,0,0,830,835,5,46,0,0,831,835,5,34,
		0,0,832,835,5,52,0,0,833,835,3,168,84,0,834,830,1,0,0,0,834,831,1,0,0,
		0,834,832,1,0,0,0,834,833,1,0,0,0,835,848,1,0,0,0,836,838,5,21,0,0,837,
		839,3,130,65,0,838,837,1,0,0,0,838,839,1,0,0,0,839,844,1,0,0,0,840,841,
		5,15,0,0,841,843,3,130,65,0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,
		0,0,0,844,845,1,0,0,0,845,847,1,0,0,0,846,844,1,0,0,0,847,849,5,22,0,0,
		848,836,1,0,0,0,848,849,1,0,0,0,849,133,1,0,0,0,850,851,5,84,0,0,851,854,
		3,138,69,0,852,853,5,85,0,0,853,855,3,130,65,0,854,852,1,0,0,0,854,855,
		1,0,0,0,855,135,1,0,0,0,856,857,3,138,69,0,857,858,5,85,0,0,858,859,3,
		130,65,0,859,137,1,0,0,0,860,866,3,168,84,0,861,862,5,21,0,0,862,863,3,
		140,70,0,863,864,5,22,0,0,864,866,1,0,0,0,865,860,1,0,0,0,865,861,1,0,
		0,0,866,139,1,0,0,0,867,872,3,168,84,0,868,869,5,15,0,0,869,871,3,168,
		84,0,870,868,1,0,0,0,871,874,1,0,0,0,872,870,1,0,0,0,872,873,1,0,0,0,873,
		141,1,0,0,0,874,872,1,0,0,0,875,876,5,86,0,0,876,877,3,168,84,0,877,143,
		1,0,0,0,878,879,3,168,84,0,879,880,5,73,0,0,880,145,1,0,0,0,881,882,5,
		87,0,0,882,886,3,130,65,0,883,885,3,148,74,0,884,883,1,0,0,0,885,888,1,
		0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,147,1,0,0,0,888,886,1,0,0,0,
		889,890,5,88,0,0,890,891,3,158,79,0,891,892,3,126,63,0,892,896,1,0,0,0,
		893,894,5,89,0,0,894,896,3,126,63,0,895,889,1,0,0,0,895,893,1,0,0,0,896,
		149,1,0,0,0,897,898,5,28,0,0,898,899,3,168,84,0,899,901,5,21,0,0,900,902,
		3,140,70,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,905,5,22,
		0,0,904,906,3,152,76,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,
		907,908,3,126,63,0,908,151,1,0,0,0,909,910,5,90,0,0,910,911,3,140,70,0,
		911,153,1,0,0,0,912,915,5,24,0,0,913,916,3,126,63,0,914,916,3,130,65,0,
		915,913,1,0,0,0,915,914,1,0,0,0,916,917,1,0,0,0,917,920,3,130,65,0,918,
		921,3,126,63,0,919,921,3,130,65,0,920,918,1,0,0,0,920,919,1,0,0,0,921,
		922,1,0,0,0,922,923,3,126,63,0,923,155,1,0,0,0,924,925,5,41,0,0,925,926,
		3,130,65,0,926,927,3,126,63,0,927,157,1,0,0,0,928,929,7,15,0,0,929,159,
		1,0,0,0,930,931,5,44,0,0,931,932,3,168,84,0,932,933,3,126,63,0,933,161,
		1,0,0,0,934,936,5,21,0,0,935,937,3,112,56,0,936,935,1,0,0,0,936,937,1,
		0,0,0,937,944,1,0,0,0,938,940,5,15,0,0,939,941,3,112,56,0,940,939,1,0,
		0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,938,1,0,0,0,943,946,1,0,0,0,944,
		942,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,944,1,0,0,0,947,961,5,
		22,0,0,948,957,5,32,0,0,949,954,3,112,56,0,950,951,5,15,0,0,951,953,3,
		112,56,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,1,0,0,
		0,955,958,1,0,0,0,956,954,1,0,0,0,957,949,1,0,0,0,957,958,1,0,0,0,958,
		959,1,0,0,0,959,961,5,33,0,0,960,934,1,0,0,0,960,948,1,0,0,0,961,163,1,
		0,0,0,962,965,3,110,55,0,963,965,3,66,33,0,964,962,1,0,0,0,964,963,1,0,
		0,0,965,165,1,0,0,0,966,968,7,16,0,0,967,969,5,102,0,0,968,967,1,0,0,0,
		968,969,1,0,0,0,969,167,1,0,0,0,970,971,7,17,0,0,971,169,1,0,0,0,108,173,
		175,189,193,198,205,211,217,221,233,241,246,256,259,265,273,276,286,292,
		298,307,321,324,336,343,346,349,353,358,362,373,375,379,385,395,401,412,
		415,421,424,432,435,441,444,452,455,461,465,476,481,486,494,509,511,516,
		526,543,555,565,571,575,578,585,605,623,627,632,636,640,645,650,654,678,
		737,739,749,756,758,765,773,777,785,789,791,802,824,828,834,838,844,848,
		854,865,872,886,895,901,905,915,920,936,940,944,954,957,960,964,968
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
