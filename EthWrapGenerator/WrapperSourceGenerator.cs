using System;
using System.IO;
using System.Linq;
using EthWrapGenerator.ABI;
using EthWrapGenerator.Solidity;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Nethereum.ABI.ABIDeserialisation;

namespace EthWrapGenerator
{
    [Generator]
    public class WrapperSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            try
            {
                var solFiles = context.AdditionalFiles
                    .Where(t => string.Compare(Path.GetExtension(t.Path), ".sol",
                        StringComparison.InvariantCultureIgnoreCase) == 0).ToList();
                var solFolders = solFiles.GroupBy(t => Path.GetFileName(Path.GetDirectoryName(t.Path)))
                    .ToDictionary(t => t.Key, t => t.ToList());


                var abiFiles = context.AdditionalFiles
                    .Where(t => string.Compare(Path.GetExtension(t.Path), ".abi",
                        StringComparison.InvariantCultureIgnoreCase) == 0).ToList();

                var abiFolders = abiFiles.GroupBy(t => Path.GetFileName(Path.GetDirectoryName(t.Path)))
                    .ToDictionary(t => t.Key, t => t.ToList());


                var folders = abiFolders.Keys.Union(solFolders.Keys).ToList();
                foreach (var folder in folders)
                {
                    var solidityContext = new SolidityContractContext()
                    {
                        Namespace = folder
                    };
                    if (solFolders.TryGetValue(folder, out var sFiles))
                    {
                        solidityContext.AddFiles(sFiles.Select(x => x.GetText(context.CancellationToken).ToString()).ToList());
                        
                        var solTemplate = new SolidityContractTemplate() 
                        {
                            Context = solidityContext
                        };
                    
                        var solSource = Format(solTemplate.TransformText());
                        context.AddSource($"{folder}storage.g.cs", solSource);
                    }
                   

                    if (abiFolders.TryGetValue(folder, out var aFiles))
                    {
                        foreach (var contractText in aFiles)
                        {
                            var fileName = Path.GetFileNameWithoutExtension(contractText.Path);

                            var content = contractText.GetText(context.CancellationToken);

                            var abiSource = content.ToString();
                            var abiContract = ABIDeserialiserFactory.DeserialiseContractABI(abiSource);
                            var abiCtx = new AbiContractContext(folder, fileName, abiContract);

                            var template = new AbiContractTemplate()
                            {
                                Context = abiCtx
                            };

                            var source = Format(template.TransformText());
                            context.AddSource($"{folder}{fileName}.g.cs", source);


                        }
                    }
                }

            }

            catch (Exception e)
            {
                File.WriteAllText("d:/testabierr", e.Message + e.StackTrace + e.InnerException?.Message);
                throw e;
            }

            /*foreach (var solFile in solFiles)
            {
                solidityContext.AddFile(solFile.GetText().ToString());
            }
           
            

            foreach (var contractFolder in contractFolders)
            {
                var folderName = contractFolder.Key;

                

            }*/

        }


        public void Initialize(GeneratorInitializationContext context)
        {
        }

        private static string Format(string source)
        {
            var tree = CSharpSyntaxTree.ParseText(source);
            var root = tree.GetRoot().NormalizeWhitespace();
            var ag = $"//<auto-generated> Abi auto generated contract. {DateTime.UtcNow:s}</auto-generated>";
            return ag + Environment.NewLine +  root.ToFullString();
        }
    }
}
